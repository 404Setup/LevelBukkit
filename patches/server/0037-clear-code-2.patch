From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: 404Setup <153366651+404Setup@users.noreply.github.com>
Date: Sun, 9 Jun 2024 18:35:25 +0800
Subject: [PATCH] clear code 2


diff --git a/src/main/java/net/minecraft/util/datafix/DataFixers.java b/src/main/java/net/minecraft/util/datafix/DataFixers.java
index f833cea4d50ba31b1b9978f7e1b52bb3f14c4afd..a0b9724e144e508690527218ff4c9faefe8123af 100644
--- a/src/main/java/net/minecraft/util/datafix/DataFixers.java
+++ b/src/main/java/net/minecraft/util/datafix/DataFixers.java
@@ -283,11 +283,7 @@ public class DataFixers {
         builder.addFixer(new com.mojang.datafixers.DataFix(schema45, false) {
             @Override
             protected com.mojang.datafixers.TypeRewriteRule makeRule() {
-                return this.fixTypeEverywhereTyped("Player CustomName", this.getInputSchema().getType(References.PLAYER), (typed) -> {
-                    return typed.update(DSL.remainderFinder(), (dynamic) -> {
-                        return EntityCustomNameToComponentFix.fixTagCustomName(dynamic);
-                    });
-                });
+                return this.fixTypeEverywhereTyped("Player CustomName", this.getInputSchema().getType(References.PLAYER), (typed) -> typed.update(DSL.remainderFinder(), EntityCustomNameToComponentFix::fixTagCustomName));
             }
         });
         // CraftBukkit end
@@ -307,12 +303,8 @@ public class DataFixers {
         Schema schema49 = builder.addSchema(1474, DataFixers.SAME_NAMESPACED);
 
         builder.addFixer(new ColorlessShulkerEntityFix(schema49, false));
-        builder.addFixer(BlockRenameFix.create(schema49, "Colorless shulker block fixer", (s) -> {
-            return Objects.equals(NamespacedSchema.ensureNamespaced(s), "minecraft:purple_shulker_box") ? "minecraft:shulker_box" : s;
-        }));
-        builder.addFixer(ItemRenameFix.create(schema49, "Colorless shulker item fixer", (s) -> {
-            return Objects.equals(NamespacedSchema.ensureNamespaced(s), "minecraft:purple_shulker_box") ? "minecraft:shulker_box" : s;
-        }));
+        builder.addFixer(BlockRenameFix.create(schema49, "Colorless shulker block fixer", (s) -> Objects.equals(NamespacedSchema.ensureNamespaced(s), "minecraft:purple_shulker_box") ? "minecraft:shulker_box" : s));
+        builder.addFixer(ItemRenameFix.create(schema49, "Colorless shulker item fixer", (s) -> Objects.equals(NamespacedSchema.ensureNamespaced(s), "minecraft:purple_shulker_box") ? "minecraft:shulker_box" : s));
         Schema schema50 = builder.addSchema(1475, DataFixers.SAME_NAMESPACED);
 
         builder.addFixer(BlockRenameFix.create(schema50, "Flowing fixer", DataFixers.createRenamer(ImmutableMap.of("minecraft:flowing_water", "minecraft:water", "minecraft:flowing_lava", "minecraft:lava"))));
@@ -719,7 +711,7 @@ public class DataFixers {
         builder.addFixer(new NamespacedTypeRenameFix(schema160, "game_event_renames_3084", References.GAME_EVENT_NAME, DataFixers.createRenamer(ImmutableMap.<String, String>builder().put("minecraft:block_press", "minecraft:block_activate").put("minecraft:block_switch", "minecraft:block_activate").put("minecraft:block_unpress", "minecraft:block_deactivate").put("minecraft:block_unswitch", "minecraft:block_deactivate").put("minecraft:drinking_finish", "minecraft:drink").put("minecraft:elytra_free_fall", "minecraft:elytra_glide").put("minecraft:entity_damaged", "minecraft:entity_damage").put("minecraft:entity_dying", "minecraft:entity_die").put("minecraft:entity_killed", "minecraft:entity_die").put("minecraft:mob_interact", "minecraft:entity_interact").put("minecraft:ravager_roar", "minecraft:entity_roar").put("minecraft:ring_bell", "minecraft:block_change").put("minecraft:shulker_close", "minecraft:container_close").put("minecraft:shulker_open", "minecraft:container_open").put("minecraft:wolf_shaking", "minecraft:entity_shake").build())));
         Schema schema161 = builder.addSchema(3086, DataFixers.SAME_NAMESPACED);
         TypeReference typereference = References.ENTITY;
-        Int2ObjectOpenHashMap<String> int2objectopenhashmap = (Int2ObjectOpenHashMap) Util.make(new Int2ObjectOpenHashMap(), (int2objectopenhashmap1) -> { // CraftBukkit - decompile error
+        Int2ObjectOpenHashMap<String> int2objectopenhashmap = Util.make(new Int2ObjectOpenHashMap<>(), (int2objectopenhashmap1) -> { // CraftBukkit - decompile error
             int2objectopenhashmap1.defaultReturnValue("minecraft:tabby");
             int2objectopenhashmap1.put(0, "minecraft:tabby");
             int2objectopenhashmap1.put(1, "minecraft:black");
@@ -745,7 +737,7 @@ public class DataFixers {
         Schema schema162 = builder.addSchema(3087, DataFixers.SAME_NAMESPACED);
 
         typereference = References.ENTITY;
-        int2objectopenhashmap = (Int2ObjectOpenHashMap) Util.make(new Int2ObjectOpenHashMap(), (int2objectopenhashmap1) -> {
+        int2objectopenhashmap = Util.make(new Int2ObjectOpenHashMap<>(), (int2objectopenhashmap1) -> {
             int2objectopenhashmap1.put(0, "minecraft:temperate");
             int2objectopenhashmap1.put(1, "minecraft:warm");
             int2objectopenhashmap1.put(2, "minecraft:cold");
@@ -771,7 +763,7 @@ public class DataFixers {
         builder.addFixer(new CriteriaRenameFix(schema166, "Migrate cat variant advancement for british shorthair", "minecraft:husbandry/complete_catalogue", (s) -> {
             return (String) map.getOrDefault(s, s);
         }));
-        Set set = Set.of("minecraft:unemployed", "minecraft:nitwit");
+        Set<String> set = Set.of("minecraft:unemployed", "minecraft:nitwit");
 
         Objects.requireNonNull(set);
         builder.addFixer(new PoiTypeRemoveFix(schema166, "Remove unpopulated villager PoI types", set::contains));
@@ -833,9 +825,10 @@ public class DataFixers {
         builder.addFixer(new BlendingDataFix(schema183));
         Schema schema184 = builder.addSchema(3447, DataFixers.SAME_NAMESPACED);
 
-        builder.addFixer(ItemRenameFix.create(schema184, "Pottery shard item renaming to Pottery sherd", DataFixers.createRenamer((Map) Stream.of("minecraft:angler_pottery_shard", "minecraft:archer_pottery_shard", "minecraft:arms_up_pottery_shard", "minecraft:blade_pottery_shard", "minecraft:brewer_pottery_shard", "minecraft:burn_pottery_shard", "minecraft:danger_pottery_shard", "minecraft:explorer_pottery_shard", "minecraft:friend_pottery_shard", "minecraft:heart_pottery_shard", "minecraft:heartbreak_pottery_shard", "minecraft:howl_pottery_shard", "minecraft:miner_pottery_shard", "minecraft:mourner_pottery_shard", "minecraft:plenty_pottery_shard", "minecraft:prize_pottery_shard", "minecraft:sheaf_pottery_shard", "minecraft:shelter_pottery_shard", "minecraft:skull_pottery_shard", "minecraft:snort_pottery_shard").collect(Collectors.toMap(Function.identity(), (s) -> {
+        builder.addFixer(ItemRenameFix.create(schema184, "Pottery shard item renaming to Pottery sherd", DataFixers.createRenamer(Stream.of("minecraft:angler_pottery_shard", "minecraft:archer_pottery_shard", "minecraft:arms_up_pottery_shard", "minecraft:blade_pottery_shard", "minecraft:brewer_pottery_shard", "minecraft:burn_pottery_shard", "minecraft:danger_pottery_shard", "minecraft:explorer_pottery_shard", "minecraft:friend_pottery_shard", "minecraft:heart_pottery_shard", "minecraft:heartbreak_pottery_shard", "minecraft:howl_pottery_shard", "minecraft:miner_pottery_shard", "minecraft:mourner_pottery_shard", "minecraft:plenty_pottery_shard", "minecraft:prize_pottery_shard", "minecraft:sheaf_pottery_shard", "minecraft:shelter_pottery_shard", "minecraft:skull_pottery_shard", "minecraft:snort_pottery_shard").collect(Collectors.toMap(Function.identity(), (s) -> {
             return s.replace("_pottery_shard", "_pottery_sherd");
         })))));
+
         Schema schema185 = builder.addSchema(3448, V3448::new);
 
         builder.addFixer(new DecoratedPotFieldRenameFix(schema185));
@@ -882,14 +875,10 @@ public class DataFixers {
     }
 
     private static UnaryOperator<String> createRenamer(Map<String, String> replacements) {
-        return (s) -> {
-            return (String) replacements.getOrDefault(s, s);
-        };
+        return (s) -> (String) replacements.getOrDefault(s, s);
     }
 
     private static UnaryOperator<String> createRenamer(String old, String current) {
-        return (s2) -> {
-            return Objects.equals(s2, old) ? current : s2;
-        };
+        return (s2) -> Objects.equals(s2, old) ? current : s2;
     }
 }
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ItemStackTheFlatteningFix.java b/src/main/java/net/minecraft/util/datafix/fixes/ItemStackTheFlatteningFix.java
index de75ea027dbd471d4d29609493779e6437a09be5..2dab71baccc69d127e2669e180fa3699acc8ebe9 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ItemStackTheFlatteningFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ItemStackTheFlatteningFix.java
@@ -1,7 +1,5 @@
 package net.minecraft.util.datafix.fixes;
 
-import com.google.common.collect.Maps;
-import com.google.common.collect.Sets;
 import com.mojang.datafixers.DSL;
 import com.mojang.datafixers.DataFix;
 import com.mojang.datafixers.DataFixUtils;
@@ -12,16 +10,18 @@ import com.mojang.datafixers.schemas.Schema;
 import com.mojang.datafixers.types.Type;
 import com.mojang.datafixers.util.Pair;
 import com.mojang.serialization.Dynamic;
-import java.util.Map;
 import java.util.Optional;
 import java.util.Set;
 import java.util.stream.Collectors;
 import javax.annotation.Nullable;
+
+import it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap;
+import it.unimi.dsi.fastutil.objects.ObjectOpenHashSet;
 import net.minecraft.util.datafix.schemas.NamespacedSchema;
 
 public class ItemStackTheFlatteningFix extends DataFix {
 
-    private static final Map<String, String> MAP = (Map) DataFixUtils.make(Maps.newHashMap(), (hashmap) -> {
+    private static final Object2ObjectOpenHashMap<String, String> MAP = DataFixUtils.make(new Object2ObjectOpenHashMap<>(), (hashmap) -> {
         hashmap.put("minecraft:stone.0", "minecraft:stone");
         hashmap.put("minecraft:stone.1", "minecraft:granite");
         hashmap.put("minecraft:stone.2", "minecraft:polished_granite");
@@ -343,10 +343,8 @@ public class ItemStackTheFlatteningFix extends DataFix {
         hashmap.put("minecraft:record_wait.0", "minecraft:music_disc_wait");
         hashmap.put("minecraft:record_ward.0", "minecraft:music_disc_ward");
     });
-    private static final Set<String> IDS = (Set) ItemStackTheFlatteningFix.MAP.keySet().stream().map((s) -> {
-        return s.substring(0, s.indexOf(46));
-    }).collect(Collectors.toSet());
-    private static final Set<String> DAMAGE_IDS = Sets.newHashSet(new String[]{"minecraft:bow", "minecraft:carrot_on_a_stick", "minecraft:chainmail_boots", "minecraft:chainmail_chestplate", "minecraft:chainmail_helmet", "minecraft:chainmail_leggings", "minecraft:diamond_axe", "minecraft:diamond_boots", "minecraft:diamond_chestplate", "minecraft:diamond_helmet", "minecraft:diamond_hoe", "minecraft:diamond_leggings", "minecraft:diamond_pickaxe", "minecraft:diamond_shovel", "minecraft:diamond_sword", "minecraft:elytra", "minecraft:fishing_rod", "minecraft:flint_and_steel", "minecraft:golden_axe", "minecraft:golden_boots", "minecraft:golden_chestplate", "minecraft:golden_helmet", "minecraft:golden_hoe", "minecraft:golden_leggings", "minecraft:golden_pickaxe", "minecraft:golden_shovel", "minecraft:golden_sword", "minecraft:iron_axe", "minecraft:iron_boots", "minecraft:iron_chestplate", "minecraft:iron_helmet", "minecraft:iron_hoe", "minecraft:iron_leggings", "minecraft:iron_pickaxe", "minecraft:iron_shovel", "minecraft:iron_sword", "minecraft:leather_boots", "minecraft:leather_chestplate", "minecraft:leather_helmet", "minecraft:leather_leggings", "minecraft:shears", "minecraft:shield", "minecraft:stone_axe", "minecraft:stone_hoe", "minecraft:stone_pickaxe", "minecraft:stone_shovel", "minecraft:stone_sword", "minecraft:wooden_axe", "minecraft:wooden_hoe", "minecraft:wooden_pickaxe", "minecraft:wooden_shovel", "minecraft:wooden_sword"});
+    private static final Set<String> IDS = ItemStackTheFlatteningFix.MAP.keySet().stream().map((s) -> s.substring(0, s.indexOf(46))).collect(Collectors.toSet());
+    private static final ObjectOpenHashSet<String> DAMAGE_IDS = new ObjectOpenHashSet<>(new String[]{"minecraft:bow", "minecraft:carrot_on_a_stick", "minecraft:chainmail_boots", "minecraft:chainmail_chestplate", "minecraft:chainmail_helmet", "minecraft:chainmail_leggings", "minecraft:diamond_axe", "minecraft:diamond_boots", "minecraft:diamond_chestplate", "minecraft:diamond_helmet", "minecraft:diamond_hoe", "minecraft:diamond_leggings", "minecraft:diamond_pickaxe", "minecraft:diamond_shovel", "minecraft:diamond_sword", "minecraft:elytra", "minecraft:fishing_rod", "minecraft:flint_and_steel", "minecraft:golden_axe", "minecraft:golden_boots", "minecraft:golden_chestplate", "minecraft:golden_helmet", "minecraft:golden_hoe", "minecraft:golden_leggings", "minecraft:golden_pickaxe", "minecraft:golden_shovel", "minecraft:golden_sword", "minecraft:iron_axe", "minecraft:iron_boots", "minecraft:iron_chestplate", "minecraft:iron_helmet", "minecraft:iron_hoe", "minecraft:iron_leggings", "minecraft:iron_pickaxe", "minecraft:iron_shovel", "minecraft:iron_sword", "minecraft:leather_boots", "minecraft:leather_chestplate", "minecraft:leather_helmet", "minecraft:leather_leggings", "minecraft:shears", "minecraft:shield", "minecraft:stone_axe", "minecraft:stone_hoe", "minecraft:stone_pickaxe", "minecraft:stone_shovel", "minecraft:stone_sword", "minecraft:wooden_axe", "minecraft:wooden_hoe", "minecraft:wooden_pickaxe", "minecraft:wooden_shovel", "minecraft:wooden_sword"});
 
     public ItemStackTheFlatteningFix(Schema outputSchema, boolean changesType) {
         super(outputSchema, changesType);
@@ -364,17 +362,17 @@ public class ItemStackTheFlatteningFix extends DataFix {
                 return typed;
             } else {
                 Typed<?> typed1 = typed;
-                Dynamic<?> dynamic = (Dynamic) typed.get(DSL.remainderFinder());
+                Dynamic<?> dynamic = typed.get(DSL.remainderFinder());
                 int i = dynamic.get("Damage").asInt(0);
-                String s = ItemStackTheFlatteningFix.updateItem((String) ((Pair) optional.get()).getSecond(), i);
+                String s = ItemStackTheFlatteningFix.updateItem(optional.get().getSecond(), i);
 
                 if (s != null) {
                     typed1 = typed.set(opticfinder, Pair.of(References.ITEM_NAME.typeName(), s));
                 }
 
-                if (ItemStackTheFlatteningFix.DAMAGE_IDS.contains(((Pair) optional.get()).getSecond())) {
+                if (ItemStackTheFlatteningFix.DAMAGE_IDS.contains(optional.get().getSecond())) {
                     Typed<?> typed2 = typed.getOrCreateTyped(opticfinder1);
-                    Dynamic<?> dynamic1 = (Dynamic) typed2.get(DSL.remainderFinder());
+                    Dynamic<?> dynamic1 = typed2.get(DSL.remainderFinder());
 
                     if (i != 0) dynamic1 = dynamic1.set("Damage", dynamic1.createInt(i)); // CraftBukkit
                     typed1 = typed1.set(opticfinder1, typed2.set(DSL.remainderFinder(), dynamic1));
diff --git a/src/main/java/net/minecraft/util/datafix/schemas/V704.java b/src/main/java/net/minecraft/util/datafix/schemas/V704.java
index 0a2a5edb245f00a876c55a37c38ba4a5ea91675f..40fe0040cb87b426c679d096d96329e7e43c0252 100644
--- a/src/main/java/net/minecraft/util/datafix/schemas/V704.java
+++ b/src/main/java/net/minecraft/util/datafix/schemas/V704.java
@@ -14,11 +14,13 @@ import com.mojang.serialization.DynamicOps;
 import java.util.Map;
 import java.util.Objects;
 import java.util.function.Supplier;
+
+import it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap;
 import net.minecraft.util.datafix.fixes.References;
 
 public class V704 extends Schema {
     protected static final Map<String, String> ITEM_TO_BLOCKENTITY = DataFixUtils.make(() -> {
-        Map<String, String> map = Maps.newHashMap();
+        Object2ObjectOpenHashMap<String, String> map = new Object2ObjectOpenHashMap<>();
         map.put("minecraft:furnace", "minecraft:furnace");
         map.put("minecraft:lit_furnace", "minecraft:furnace");
         map.put("minecraft:chest", "minecraft:chest");
@@ -38,7 +40,6 @@ public class V704 extends Schema {
         map.put("minecraft:skull", "minecraft:skull");
         map.put("minecraft:daylight_detector", "minecraft:daylight_detector");
         map.put("minecraft:hopper", "minecraft:hopper");
-        map.put("minecraft:banner", "minecraft:banner");
         map.put("minecraft:flower_pot", "minecraft:flower_pot");
         map.put("minecraft:repeating_command_block", "minecraft:command_block");
         map.put("minecraft:chain_command_block", "minecraft:command_block");
@@ -90,7 +91,6 @@ public class V704 extends Schema {
         map.put("minecraft:structure_block", "minecraft:structure_block");
         map.put("minecraft:end_portal", "minecraft:end_portal");
         map.put("minecraft:end_gateway", "minecraft:end_gateway");
-        map.put("minecraft:sign", "minecraft:sign");
         map.put("minecraft:shield", "minecraft:banner");
         map.put("minecraft:white_bed", "minecraft:bed");
         map.put("minecraft:orange_bed", "minecraft:bed");
@@ -154,8 +154,8 @@ public class V704 extends Schema {
 
     public Type<?> getChoiceType(TypeReference typeReference, String string) {
         return Objects.equals(typeReference.typeName(), References.BLOCK_ENTITY.typeName())
-            ? super.getChoiceType(typeReference, NamespacedSchema.ensureNamespaced(string))
-            : super.getChoiceType(typeReference, string);
+                ? super.getChoiceType(typeReference, NamespacedSchema.ensureNamespaced(string))
+                : super.getChoiceType(typeReference, string);
     }
 
     public Map<String, Supplier<TypeTemplate>> registerBlockEntities(Schema schema) {
@@ -190,28 +190,28 @@ public class V704 extends Schema {
         super.registerTypes(schema, map, map2);
         schema.registerType(false, References.BLOCK_ENTITY, () -> DSL.taggedChoiceLazy("id", NamespacedSchema.namespacedString(), map2));
         schema.registerType(
-            true,
-            References.ITEM_STACK,
-            () -> DSL.hook(
-                    DSL.optionalFields(
-                        "id",
-                        References.ITEM_NAME.in(schema),
-                        "tag",
+                true,
+                References.ITEM_STACK,
+                () -> DSL.hook(
                         DSL.optionalFields(
-                            "EntityTag",
-                            References.ENTITY_TREE.in(schema),
-                            "BlockEntityTag",
-                            References.BLOCK_ENTITY.in(schema),
-                            "CanDestroy",
-                            DSL.list(References.BLOCK_NAME.in(schema)),
-                            "CanPlaceOn",
-                            DSL.list(References.BLOCK_NAME.in(schema)),
-                            "Items",
-                            DSL.list(References.ITEM_STACK.in(schema))
-                        )
-                    ),
-                    ADD_NAMES,
-                    HookFunction.IDENTITY
+                                "id",
+                                References.ITEM_NAME.in(schema),
+                                "tag",
+                                DSL.optionalFields(
+                                        "EntityTag",
+                                        References.ENTITY_TREE.in(schema),
+                                        "BlockEntityTag",
+                                        References.BLOCK_ENTITY.in(schema),
+                                        "CanDestroy",
+                                        DSL.list(References.BLOCK_NAME.in(schema)),
+                                        "CanPlaceOn",
+                                        DSL.list(References.BLOCK_NAME.in(schema)),
+                                        "Items",
+                                        DSL.list(References.ITEM_STACK.in(schema))
+                                )
+                        ),
+                        ADD_NAMES,
+                        HookFunction.IDENTITY
                 )
         );
     }
