From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: 404Setup <153366651+404Setup@users.noreply.github.com>
Date: Thu, 30 May 2024 12:00:39 +0800
Subject: [PATCH] SparklyPaper: Skip "distanceToSqr" call in
 "ServerEntity#sendChanges" if the delta movement hasn't changed

The "distanceToSqr" call is a bit expensive, so avoiding it is pretty nice, around ~15% calls are skipped with this check

We could also check if the x,y,z coordinates are equal, but for now, let's just keep the identity check, which also helps us since Minecraft's code does reuse the original delta movement Vec3 object

diff --git a/src/main/java/net/minecraft/server/level/ServerEntity.java b/src/main/java/net/minecraft/server/level/ServerEntity.java
index 2cdef9ef1b5829a574c43abd8b6a2ba29dae4792..8364e1f0e4f4a1fbcabeaffbf102db1ed2867aac 100644
--- a/src/main/java/net/minecraft/server/level/ServerEntity.java
+++ b/src/main/java/net/minecraft/server/level/ServerEntity.java
@@ -3,6 +3,7 @@ package net.minecraft.server.level;
 import com.google.common.collect.Lists;
 import com.mojang.datafixers.util.Pair;
 import com.mojang.logging.LogUtils;
+
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
@@ -11,6 +12,7 @@ import java.util.Set;
 import java.util.function.Consumer;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
+
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.game.ClientGamePacketListener;
 import net.minecraft.network.protocol.game.ClientboundBundlePacket;
@@ -48,10 +50,10 @@ import org.bukkit.event.player.PlayerVelocityEvent;
 
 public class ServerEntity {
 
+    public static final int FORCED_POS_UPDATE_PERIOD = 60;
     private static final Logger LOGGER = LogUtils.getLogger();
     private static final int TOLERANCE_LEVEL_ROTATION = 1;
     private static final double TOLERANCE_LEVEL_POSITION = 7.62939453125E-6D;
-    public static final int FORCED_POS_UPDATE_PERIOD = 60;
     private static final int FORCED_TELEPORT_PERIOD = 400;
     private final ServerLevel level;
     private final Entity entity;
@@ -59,6 +61,8 @@ public class ServerEntity {
     private final boolean trackDelta;
     private final Consumer<Packet<?>> broadcast;
     private final VecDeltaCodec positionCodec = new VecDeltaCodec();
+    // CraftBukkit start
+    private final Set<ServerPlayerConnection> trackedPlayers;
     private int yRotp;
     private int xRotp;
     private int yHeadRotp;
@@ -70,8 +74,8 @@ public class ServerEntity {
     private boolean wasOnGround;
     @Nullable
     private List<SynchedEntityData.DataValue<?>> trackedDataValues;
-    // CraftBukkit start
-    private final Set<ServerPlayerConnection> trackedPlayers;
+    // Paper start - fix desync when a player is added to the tracker
+    private boolean forceStateResync;
 
     public ServerEntity(ServerLevel worldserver, Entity entity, int i, boolean flag, Consumer<Packet<?>> consumer, Set<ServerPlayerConnection> trackedPlayers) {
         this.trackedPlayers = trackedPlayers;
@@ -91,12 +95,14 @@ public class ServerEntity {
         this.trackedDataValues = entity.getEntityData().getNonDefaultValues();
     }
 
-    // Paper start - fix desync when a player is added to the tracker
-    private boolean forceStateResync;
+    private static Stream<Entity> removedPassengers(List<Entity> passengers, List<Entity> lastPassengers) {
+        return lastPassengers.stream().filter((entity) -> !passengers.contains(entity));
+    }
+    // Paper end - fix desync when a player is added to the tracker
+
     public void onPlayerAdd() {
         this.forceStateResync = true;
     }
-    // Paper end - fix desync when a player is added to the tracker
 
     public void sendChanges() {
         List<Entity> list = this.entity.getPassengers();
@@ -183,7 +189,7 @@ public class ServerEntity {
                     long i1 = this.positionCodec.encodeZ(vec3d);
                     boolean flag6 = k < -32768L || k > 32767L || l < -32768L || l > 32767L || i1 < -32768L || i1 > 32767L;
 
-                    if (!this.forceStateResync && !flag6 && this.teleportDelay <= 400 && !this.wasRiding && this.wasOnGround == this.entity.onGround()&& !(io.papermc.paper.configuration.GlobalConfiguration.get().collisions.sendFullPosForHardCollidingEntities && this.entity.hardCollides())) { // Paper - send full pos for hard colliding entities to prevent collision problems due to desync
+                    if (!this.forceStateResync && !flag6 && this.teleportDelay <= 400 && !this.wasRiding && this.wasOnGround == this.entity.onGround() && !(io.papermc.paper.configuration.GlobalConfiguration.get().collisions.sendFullPosForHardCollidingEntities && this.entity.hardCollides())) { // Paper - send full pos for hard colliding entities to prevent collision problems due to desync
                         if ((!flag2 || !flag3) && !(this.entity instanceof AbstractArrow)) {
                             if (flag2) {
                                 packet1 = new ClientboundMoveEntityPacket.Pos(this.entity.getId(), (short) ((int) k), (short) ((int) l), (short) ((int) i1), this.entity.onGround());
@@ -208,12 +214,14 @@ public class ServerEntity {
 
                 if ((this.trackDelta || this.entity.hasImpulse || this.entity instanceof LivingEntity && ((LivingEntity) this.entity).isFallFlying()) && this.tickCount > 0) {
                     Vec3 vec3d1 = this.entity.getDeltaMovement();
-                    double d0 = vec3d1.distanceToSqr(this.ap);
+                    if (vec3d1 != this.ap) { // SparklyPaper start - skip distanceToSqr call in ServerEntity#sendChanges if the delta movement hasn't changed
+                        double d0 = vec3d1.distanceToSqr(this.ap);
 
-                    if (d0 > 1.0E-7D || d0 > 0.0D && vec3d1.lengthSqr() == 0.0D) {
-                        this.ap = vec3d1;
-                        this.broadcast.accept(new ClientboundSetEntityMotionPacket(this.entity.getId(), this.ap));
-                    }
+                        if (d0 > 1.0E-7D || d0 > 0.0D && vec3d1.lengthSqr() == 0.0D) {
+                            this.ap = vec3d1;
+                            this.broadcast.accept(new ClientboundSetEntityMotionPacket(this.entity.getId(), this.ap));
+                        }
+                    } // SparklyPaper end
                 }
 
                 if (packet1 != null) {
@@ -271,10 +279,6 @@ public class ServerEntity {
 
     }
 
-    private static Stream<Entity> removedPassengers(List<Entity> passengers, List<Entity> lastPassengers) {
-        return lastPassengers.stream().filter((entity) -> !passengers.contains(entity));
-    }
-
     public void removePairing(ServerPlayer player) {
         this.entity.stopSeenByPlayer(player);
         player.connection.send(new ClientboundRemoveEntitiesPacket(new int[]{this.entity.getId()}));
