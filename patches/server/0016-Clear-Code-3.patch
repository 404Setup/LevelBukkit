From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: 404Setup <153366651+404Setup@users.noreply.github.com>
Date: Thu, 30 May 2024 16:56:37 +0800
Subject: [PATCH] Clear Code 3


diff --git a/src/main/java/io/papermc/paper/command/PaperPluginsCommand.java b/src/main/java/io/papermc/paper/command/PaperPluginsCommand.java
index f0fce4113fb07c64adbec029d177c236cbdcbae8..d7f00515cb79f450663e13e9a69a1b170f93cf2b 100644
--- a/src/main/java/io/papermc/paper/command/PaperPluginsCommand.java
+++ b/src/main/java/io/papermc/paper/command/PaperPluginsCommand.java
@@ -41,7 +41,7 @@ public class PaperPluginsCommand extends BukkitCommand {
         .append(asPlainComponents("""
             Server plugins can add new behavior to your server!
             You can find new plugins on Paper's plugin repository, Hangar.
-                        
+            
             <link to hangar>
             """));
 
@@ -55,7 +55,7 @@ public class PaperPluginsCommand extends BukkitCommand {
         .append(asPlainComponents("""
             A legacy plugin is a plugin that was made on
             very old unsupported versions of the game.
-                        
+            
             It is encouraged that you replace this plugin,
             as they might not work in the future and may cause
             performance issues.
diff --git a/src/main/java/io/papermc/paper/threadedregions/commands/CommandServerHealth.java b/src/main/java/io/papermc/paper/threadedregions/commands/CommandServerHealth.java
index 0b48f45760829f1f4813b5f0f23e920dca7b1c45..b74ade39b4ac18af16a7a6340033e55f2cf2947a 100644
--- a/src/main/java/io/papermc/paper/threadedregions/commands/CommandServerHealth.java
+++ b/src/main/java/io/papermc/paper/threadedregions/commands/CommandServerHealth.java
@@ -1,7 +1,6 @@
 package io.papermc.paper.threadedregions.commands;
 
 import io.papermc.paper.threadedregions.RegionizedServer;
-import io.papermc.paper.threadedregions.RegionizedWorldData;
 import io.papermc.paper.threadedregions.ThreadedRegionizer;
 import io.papermc.paper.threadedregions.TickData;
 import io.papermc.paper.threadedregions.TickRegionScheduler;
@@ -24,6 +23,7 @@ import org.bukkit.command.CommandSender;
 import org.bukkit.craftbukkit.CraftWorld;
 import org.bukkit.entity.Entity;
 import org.bukkit.entity.Player;
+
 import java.text.DecimalFormat;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -32,15 +32,9 @@ import java.util.Locale;
 
 public final class CommandServerHealth extends Command {
 
-    private static final ThreadLocal<DecimalFormat> TWO_DECIMAL_PLACES = ThreadLocal.withInitial(() -> {
-        return new DecimalFormat("#,##0.00");
-    });
-    private static final ThreadLocal<DecimalFormat> ONE_DECIMAL_PLACES = ThreadLocal.withInitial(() -> {
-        return new DecimalFormat("#,##0.0");
-    });
-    private static final ThreadLocal<DecimalFormat> NO_DECIMAL_PLACES = ThreadLocal.withInitial(() -> {
-        return new DecimalFormat("#,##0");
-    });
+    private static final ThreadLocal<DecimalFormat> TWO_DECIMAL_PLACES = ThreadLocal.withInitial(() -> new DecimalFormat("#,##0.00"));
+    private static final ThreadLocal<DecimalFormat> ONE_DECIMAL_PLACES = ThreadLocal.withInitial(() -> new DecimalFormat("#,##0.0"));
+    private static final ThreadLocal<DecimalFormat> NO_DECIMAL_PLACES = ThreadLocal.withInitial(() -> new DecimalFormat("#,##0"));
 
     private static final TextColor HEADER = TextColor.color(79, 164, 240);
     private static final TextColor PRIMARY = TextColor.color(48, 145, 237);
@@ -58,30 +52,30 @@ public final class CommandServerHealth extends Command {
     private static Component formatRegionInfo(final String prefix, final double util, final double mspt, final double tps,
                                               final boolean newline) {
         return Component.text()
-            .append(Component.text(prefix, PRIMARY, TextDecoration.BOLD))
-            .append(Component.text(ONE_DECIMAL_PLACES.get().format(util * 100.0), CommandUtil.getUtilisationColourRegion(util)))
-            .append(Component.text("% util at ", PRIMARY))
-            .append(Component.text(TWO_DECIMAL_PLACES.get().format(mspt), CommandUtil.getColourForMSPT(mspt)))
-            .append(Component.text(" MSPT at ", PRIMARY))
-            .append(Component.text(TWO_DECIMAL_PLACES.get().format(tps), CommandUtil.getColourForTPS(tps)))
-            .append(Component.text(" TPS" + (newline ? "\n" : ""), PRIMARY))
-            .build();
+                .append(Component.text(prefix, PRIMARY, TextDecoration.BOLD))
+                .append(Component.text(ONE_DECIMAL_PLACES.get().format(util * 100.0), CommandUtil.getUtilisationColourRegion(util)))
+                .append(Component.text("% util at ", PRIMARY))
+                .append(Component.text(TWO_DECIMAL_PLACES.get().format(mspt), CommandUtil.getColourForMSPT(mspt)))
+                .append(Component.text(" MSPT at ", PRIMARY))
+                .append(Component.text(TWO_DECIMAL_PLACES.get().format(tps), CommandUtil.getColourForTPS(tps)))
+                .append(Component.text(" TPS" + (newline ? "\n" : ""), PRIMARY))
+                .build();
     }
 
     private static Component formatRegionStats(final TickRegions.RegionStats stats, final boolean newline) {
         return Component.text()
-            .append(Component.text("Chunks: ", PRIMARY))
-            .append(Component.text(NO_DECIMAL_PLACES.get().format((long)stats.getChunkCount()), INFORMATION))
-            .append(Component.text(" Players: ", PRIMARY))
-            .append(Component.text(NO_DECIMAL_PLACES.get().format((long)stats.getPlayerCount()), INFORMATION))
-            .append(Component.text(" Entities: ", PRIMARY))
-            .append(Component.text(NO_DECIMAL_PLACES.get().format((long)stats.getEntityCount()) + (newline ? "\n" : ""), INFORMATION))
-            .build();
+                .append(Component.text("Chunks: ", PRIMARY))
+                .append(Component.text(NO_DECIMAL_PLACES.get().format(stats.getChunkCount()), INFORMATION))
+                .append(Component.text(" Players: ", PRIMARY))
+                .append(Component.text(NO_DECIMAL_PLACES.get().format(stats.getPlayerCount()), INFORMATION))
+                .append(Component.text(" Entities: ", PRIMARY))
+                .append(Component.text(NO_DECIMAL_PLACES.get().format(stats.getEntityCount()) + (newline ? "\n" : ""), INFORMATION))
+                .build();
     }
 
     private static boolean executeRegion(final CommandSender sender, final String commandLabel, final String[] args) {
         final ThreadedRegionizer.ThreadedRegion<TickRegions.TickRegionData, TickRegions.TickRegionSectionData> region =
-            TickRegionScheduler.getCurrentRegion();
+                TickRegionScheduler.getCurrentRegion();
         if (region == null) {
             sender.sendMessage(Component.text("You are not in a region currently", NamedTextColor.RED));
             return true;
@@ -109,21 +103,21 @@ public final class CommandServerHealth extends Command {
         final String location = "[w:'" + world.getWorld().getName() + "'," + centerBlockX + "," + yLoc + "," + centerBlockZ + "]";
 
         final Component line = Component.text()
-            .append(Component.text("Region around block ", PRIMARY))
-            .append(Component.text(location, INFORMATION))
-            .append(Component.text(":\n", PRIMARY))
-
-            .append(
-                formatRegionInfo("15s: ", util15s, mspt15s, tps15s, true)
-            )
-            .append(
-                formatRegionInfo("1m: ", util1m, mspt1m, tps1m, true)
-            )
-            .append(
-                formatRegionStats(region.getData().getRegionStats(), false)
-            )
-
-            .build();
+                .append(Component.text("Region around block ", PRIMARY))
+                .append(Component.text(location, INFORMATION))
+                .append(Component.text(":\n", PRIMARY))
+
+                .append(
+                        formatRegionInfo("15s: ", util15s, mspt15s, tps15s, true)
+                )
+                .append(
+                        formatRegionInfo("1m: ", util1m, mspt1m, tps1m, true)
+                )
+                .append(
+                        formatRegionStats(region.getData().getRegionStats(), false)
+                )
+
+                .build();
 
         sender.sendMessage(line);
 
@@ -144,10 +138,10 @@ public final class CommandServerHealth extends Command {
         }
 
         final List<ThreadedRegionizer.ThreadedRegion<TickRegions.TickRegionData, TickRegions.TickRegionSectionData>> regions =
-            new ArrayList<>();
+                new ArrayList<>();
 
         for (final World bukkitWorld : Bukkit.getWorlds()) {
-            final ServerLevel world = ((CraftWorld)bukkitWorld).getHandle();
+            final ServerLevel world = ((CraftWorld) bukkitWorld).getHandle();
             world.regioniser.computeForAllRegions(regions::add);
         }
 
@@ -194,7 +188,7 @@ public final class CommandServerHealth extends Command {
         }
 
         final List<ObjectObjectImmutablePair<ThreadedRegionizer.ThreadedRegion<TickRegions.TickRegionData, TickRegions.TickRegionSectionData>, TickData.TickReportData>>
-            regionsBelowThreshold = new ArrayList<>();
+                regionsBelowThreshold = new ArrayList<>();
 
         for (int i = 0, len = regions.size(); i < len; ++i) {
             final TickData.TickReportData report = reportsByRegion.get(i);
@@ -219,11 +213,11 @@ public final class CommandServerHealth extends Command {
         }
         for (int i = 0, len = Math.min(lowestRegionsCount, regionsBelowThreshold.size()); i < len; ++i) {
             final ObjectObjectImmutablePair<ThreadedRegionizer.ThreadedRegion<TickRegions.TickRegionData, TickRegions.TickRegionSectionData>, TickData.TickReportData>
-                pair = regionsBelowThreshold.get(i);
+                    pair = regionsBelowThreshold.get(i);
 
             final TickData.TickReportData report = pair.right();
             final ThreadedRegionizer.ThreadedRegion<TickRegions.TickRegionData, TickRegions.TickRegionSectionData> region =
-                pair.left();
+                    pair.left();
 
             if (report == null) {
                 // skip regions with no data
@@ -245,73 +239,73 @@ public final class CommandServerHealth extends Command {
             final int yLoc = 80;
             final String location = "[w:'" + world.getWorld().getName() + "'," + centerBlockX + "," + yLoc + "," + centerBlockZ + "]";
             final Component line = Component.text()
-                .append(Component.text(" - ", LIST, TextDecoration.BOLD))
-                .append(Component.text("Region around block ", PRIMARY))
-                .append(Component.text(location, INFORMATION))
-                .append(Component.text(":\n", PRIMARY))
-
-                .append(Component.text("    ", PRIMARY))
-                .append(Component.text(ONE_DECIMAL_PLACES.get().format(util * 100.0), CommandUtil.getUtilisationColourRegion(util)))
-                .append(Component.text("% util at ", PRIMARY))
-                .append(Component.text(TWO_DECIMAL_PLACES.get().format(mspt), CommandUtil.getColourForMSPT(mspt)))
-                .append(Component.text(" MSPT at ", PRIMARY))
-                .append(Component.text(TWO_DECIMAL_PLACES.get().format(tps), CommandUtil.getColourForTPS(tps)))
-                .append(Component.text(" TPS\n", PRIMARY))
-
-                .append(Component.text("    ", PRIMARY))
-                .append(formatRegionStats(region.getData().getRegionStats(), (i + 1) != len))
-                .build()
-
-                .clickEvent(ClickEvent.clickEvent(ClickEvent.Action.RUN_COMMAND, "/minecraft:execute as @s in " + world.getWorld().getKey().toString() + " run tp " + centerBlockX + ".5 " + yLoc + " " + centerBlockZ + ".5"))
-                .hoverEvent(HoverEvent.hoverEvent(HoverEvent.Action.SHOW_TEXT, Component.text("Click to teleport to " + location, SECONDARY)));
+                    .append(Component.text(" - ", LIST, TextDecoration.BOLD))
+                    .append(Component.text("Region around block ", PRIMARY))
+                    .append(Component.text(location, INFORMATION))
+                    .append(Component.text(":\n", PRIMARY))
+
+                    .append(Component.text("    ", PRIMARY))
+                    .append(Component.text(ONE_DECIMAL_PLACES.get().format(util * 100.0), CommandUtil.getUtilisationColourRegion(util)))
+                    .append(Component.text("% util at ", PRIMARY))
+                    .append(Component.text(TWO_DECIMAL_PLACES.get().format(mspt), CommandUtil.getColourForMSPT(mspt)))
+                    .append(Component.text(" MSPT at ", PRIMARY))
+                    .append(Component.text(TWO_DECIMAL_PLACES.get().format(tps), CommandUtil.getColourForTPS(tps)))
+                    .append(Component.text(" TPS\n", PRIMARY))
+
+                    .append(Component.text("    ", PRIMARY))
+                    .append(formatRegionStats(region.getData().getRegionStats(), (i + 1) != len))
+                    .build()
+
+                    .clickEvent(ClickEvent.clickEvent(ClickEvent.Action.RUN_COMMAND, "/minecraft:execute as @s in " + world.getWorld().getKey() + " run tp " + centerBlockX + ".5 " + yLoc + " " + centerBlockZ + ".5"))
+                    .hoverEvent(HoverEvent.hoverEvent(HoverEvent.Action.SHOW_TEXT, Component.text("Click to teleport to " + location, SECONDARY)));
 
             lowestRegionsBuilder.append(line);
         }
 
         sender.sendMessage(
-            Component.text()
-                .append(Component.text("Server Health Report\n", HEADER, TextDecoration.BOLD))
+                Component.text()
+                        .append(Component.text("Server Health Report\n", HEADER, TextDecoration.BOLD))
 
-                .append(Component.text(" - ", LIST, TextDecoration.BOLD))
-                .append(Component.text("Online Players: ", PRIMARY))
-                .append(Component.text(Bukkit.getOnlinePlayers().size() + "\n", INFORMATION))
+                        .append(Component.text(" - ", LIST, TextDecoration.BOLD))
+                        .append(Component.text("Online Players: ", PRIMARY))
+                        .append(Component.text(Bukkit.getOnlinePlayers().size() + "\n", INFORMATION))
 
-                .append(Component.text(" - ", LIST, TextDecoration.BOLD))
-                .append(Component.text("Total regions: ", PRIMARY))
-                .append(Component.text(regions.size() + "\n", INFORMATION))
+                        .append(Component.text(" - ", LIST, TextDecoration.BOLD))
+                        .append(Component.text("Total regions: ", PRIMARY))
+                        .append(Component.text(regions.size() + "\n", INFORMATION))
 
-                .append(Component.text(" - ", LIST, TextDecoration.BOLD))
-                .append(Component.text("Utilisation: ", PRIMARY))
-                .append(Component.text(ONE_DECIMAL_PLACES.get().format(totalUtil * 100.0), CommandUtil.getUtilisationColourRegion(totalUtil / (double)maxThreadCount)))
-                .append(Component.text("% / ", PRIMARY))
-                .append(Component.text(ONE_DECIMAL_PLACES.get().format(maxThreadCount * 100.0), INFORMATION))
-                .append(Component.text("%\n", PRIMARY))
+                        .append(Component.text(" - ", LIST, TextDecoration.BOLD))
+                        .append(Component.text("Utilisation: ", PRIMARY))
+                        .append(Component.text(ONE_DECIMAL_PLACES.get().format(totalUtil * 100.0), CommandUtil.getUtilisationColourRegion(totalUtil / (double) maxThreadCount)))
+                        .append(Component.text("% / ", PRIMARY))
+                        .append(Component.text(ONE_DECIMAL_PLACES.get().format(maxThreadCount * 100.0), INFORMATION))
+                        .append(Component.text("%\n", PRIMARY))
 
-                .append(Component.text(" - ", LIST, TextDecoration.BOLD))
-                .append(Component.text("Load rate: ", PRIMARY))
-                .append(Component.text(TWO_DECIMAL_PLACES.get().format(loadRate) + ", ", INFORMATION))
-                .append(Component.text("Gen rate: ", PRIMARY))
-                .append(Component.text(TWO_DECIMAL_PLACES.get().format(genRate) + "\n", INFORMATION))
+                        .append(Component.text(" - ", LIST, TextDecoration.BOLD))
+                        .append(Component.text("Load rate: ", PRIMARY))
+                        .append(Component.text(TWO_DECIMAL_PLACES.get().format(loadRate) + ", ", INFORMATION))
+                        .append(Component.text("Gen rate: ", PRIMARY))
+                        .append(Component.text(TWO_DECIMAL_PLACES.get().format(genRate) + "\n", INFORMATION))
 
-                .append(Component.text(" - ", LIST, TextDecoration.BOLD))
-                .append(Component.text("Lowest Region TPS: ", PRIMARY))
-                .append(Component.text(TWO_DECIMAL_PLACES.get().format(minTps) + "\n", CommandUtil.getColourForTPS(minTps)))
+                        .append(Component.text(" - ", LIST, TextDecoration.BOLD))
+                        .append(Component.text("Lowest Region TPS: ", PRIMARY))
+                        .append(Component.text(TWO_DECIMAL_PLACES.get().format(minTps) + "\n", CommandUtil.getColourForTPS(minTps)))
 
 
-                .append(Component.text(" - ", LIST, TextDecoration.BOLD))
-                .append(Component.text("Median Region TPS: ", PRIMARY))
-                .append(Component.text(TWO_DECIMAL_PLACES.get().format(medianTps) + "\n", CommandUtil.getColourForTPS(medianTps)))
+                        .append(Component.text(" - ", LIST, TextDecoration.BOLD))
+                        .append(Component.text("Median Region TPS: ", PRIMARY))
+                        .append(Component.text(TWO_DECIMAL_PLACES.get().format(medianTps) + "\n", CommandUtil.getColourForTPS(medianTps)))
 
-                .append(Component.text(" - ", LIST, TextDecoration.BOLD))
-                .append(Component.text("Highest Region TPS: ", PRIMARY))
-                .append(Component.text(TWO_DECIMAL_PLACES.get().format(maxTps) + "\n", CommandUtil.getColourForTPS(maxTps)))
+                        .append(Component.text(" - ", LIST, TextDecoration.BOLD))
+                        .append(Component.text("Highest Region TPS: ", PRIMARY))
+                        .append(Component.text(TWO_DECIMAL_PLACES.get().format(maxTps) + "\n", CommandUtil.getColourForTPS(maxTps)))
 
-                .append(Component.text("Highest ", HEADER, TextDecoration.BOLD))
-                .append(Component.text(Integer.toString(lowestRegionsCount), INFORMATION, TextDecoration.BOLD))
-                .append(Component.text(" utilisation regions\n", HEADER, TextDecoration.BOLD))
+                        .append(Component.text("Highest ", HEADER, TextDecoration.BOLD))
+                        .append(Component.text(Integer.toString(lowestRegionsCount), INFORMATION, TextDecoration.BOLD))
+                        .append(Component.text(" utilisation regions\n", HEADER, TextDecoration.BOLD))
 
-                .append(lowestRegionsBuilder.build())
-                .build()
+                        .append(lowestRegionsBuilder.build())
+                        .build()
         );
 
         return true;
@@ -326,22 +320,20 @@ public final class CommandServerHealth extends Command {
             type = args[0];
         }
 
-        switch (type.toLowerCase(Locale.ROOT)) {
-            case "server": {
-                return executeServer(sender, commandLabel, args);
-            }
-            case "region": {
+        return switch (type.toLowerCase(Locale.ROOT)) {
+            case "server" -> executeServer(sender, commandLabel, args);
+            case "region" -> {
                 if (!(sender instanceof Entity)) {
                     sender.sendMessage(Component.text("Cannot see current region information as console", NamedTextColor.RED));
-                    return true;
+                    yield true;
                 }
-                return executeRegion(sender, commandLabel, args);
+                yield executeRegion(sender, commandLabel, args);
             }
-            default: {
+            default -> {
                 sender.sendMessage(Component.text("Type '" + args[0] + "' must be one of: [server, region]", NamedTextColor.RED));
-                return true;
+                yield true;
             }
-        }
+        };
     }
 
     @Override
@@ -350,13 +342,13 @@ public final class CommandServerHealth extends Command {
             if (sender instanceof Entity) {
                 return CommandUtil.getSortedList(Arrays.asList("server", "region"));
             } else {
-                return CommandUtil.getSortedList(Arrays.asList("server"));
+                return CommandUtil.getSortedList(List.of("server"));
             }
         } else if (args.length == 1) {
             if (sender instanceof Entity) {
                 return CommandUtil.getSortedList(Arrays.asList("server", "region"), args[0]);
             } else {
-                return CommandUtil.getSortedList(Arrays.asList("server"), args[0]);
+                return CommandUtil.getSortedList(List.of("server"), args[0]);
             }
         }
         return new ArrayList<>();
diff --git a/src/main/java/me/earthme/luminol/commands/TpsBarCommand.java b/src/main/java/me/earthme/luminol/commands/TpsBarCommand.java
index 01677f210fae53a108bfe194189cb4c233e9fa47..15c1def7ffbeba90c86ab5e2a58d53283f237f40 100644
--- a/src/main/java/me/earthme/luminol/commands/TpsBarCommand.java
+++ b/src/main/java/me/earthme/luminol/commands/TpsBarCommand.java
@@ -4,9 +4,6 @@ import me.earthme.luminol.config.modules.misc.TpsBarConfig;
 import me.earthme.luminol.functions.GlobalServerTpsBar;
 import net.kyori.adventure.text.Component;
 import net.kyori.adventure.text.format.TextColor;
-import net.kyori.adventure.util.RGBLike;
-import org.bukkit.ChatColor;
-import org.bukkit.Color;
 import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
 import org.bukkit.entity.Player;
diff --git a/src/main/java/net/minecraft/server/commands/ListPlayersCommand.java b/src/main/java/net/minecraft/server/commands/ListPlayersCommand.java
index 73180c617945610e11b777733655f9e2c4c1dd0c..4167a079db7d77def58012e8772c03a769481f5d 100644
--- a/src/main/java/net/minecraft/server/commands/ListPlayersCommand.java
+++ b/src/main/java/net/minecraft/server/commands/ListPlayersCommand.java
@@ -2,8 +2,11 @@ package net.minecraft.server.commands;
 
 import com.mojang.brigadier.CommandDispatcher;
 import com.mojang.brigadier.builder.LiteralArgumentBuilder;
+
+import java.util.ArrayList;
 import java.util.List;
 import java.util.function.Function;
+
 import net.minecraft.commands.CommandSourceStack;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.ComponentUtils;
@@ -13,14 +16,11 @@ import net.minecraft.world.entity.player.Player;
 
 public class ListPlayersCommand {
 
-    public ListPlayersCommand() {}
+    public ListPlayersCommand() {
+    }
 
     public static void register(CommandDispatcher<CommandSourceStack> dispatcher) {
-        dispatcher.register((LiteralArgumentBuilder) ((LiteralArgumentBuilder) net.minecraft.commands.Commands.literal("list").executes((commandcontext) -> {
-            return ListPlayersCommand.listPlayers((CommandSourceStack) commandcontext.getSource());
-        })).then(net.minecraft.commands.Commands.literal("uuids").executes((commandcontext) -> {
-            return ListPlayersCommand.listPlayersWithUuids((CommandSourceStack) commandcontext.getSource());
-        })));
+        dispatcher.register((LiteralArgumentBuilder) ((LiteralArgumentBuilder) net.minecraft.commands.Commands.literal("list").executes((commandcontext) -> ListPlayersCommand.listPlayers(commandcontext.getSource()))).then(net.minecraft.commands.Commands.literal("uuids").executes((commandcontext) -> ListPlayersCommand.listPlayersWithUuids(commandcontext.getSource()))));
     }
 
     private static int listPlayers(CommandSourceStack source) {
@@ -28,26 +28,20 @@ public class ListPlayersCommand {
     }
 
     private static int listPlayersWithUuids(CommandSourceStack source) {
-        return ListPlayersCommand.format(source, (entityplayer) -> {
-            return Component.translatable("commands.list.nameAndId", entityplayer.getName(), Component.translationArg(entityplayer.getGameProfile().getId()));
-        });
+        return ListPlayersCommand.format(source, (entityplayer) -> Component.translatable("commands.list.nameAndId", entityplayer.getName(), Component.translationArg(entityplayer.getGameProfile().getId())));
     }
 
     private static int format(CommandSourceStack source, Function<ServerPlayer, Component> nameProvider) {
         PlayerList playerlist = source.getServer().getPlayerList();
         // CraftBukkit start
         List<ServerPlayer> players = playerlist.getPlayers();
-        if (source.getBukkitSender() instanceof org.bukkit.entity.Player) {
-            org.bukkit.entity.Player sender = (org.bukkit.entity.Player) source.getBukkitSender();
-            players = players.stream().filter((ep) -> sender.canSee(ep.getBukkitEntity())).collect(java.util.stream.Collectors.toList());
+        if (source.getBukkitSender() instanceof org.bukkit.entity.Player sender) {
+            players.removeIf(ep -> !sender.canSee(ep.getBukkitEntity()));
         }
-        List<ServerPlayer> list = players;
         // CraftBukkit end
-        Component ichatbasecomponent = ComponentUtils.formatList(list, nameProvider);
+        Component ichatbasecomponent = ComponentUtils.formatList(players, nameProvider);
 
-        source.sendSuccess(() -> {
-            return Component.translatable("commands.list.players", list.size(), playerlist.getMaxPlayers(), ichatbasecomponent);
-        }, false);
-        return list.size();
+        source.sendSuccess(() -> Component.translatable("commands.list.players", players.size(), playerlist.getMaxPlayers(), ichatbasecomponent), false);
+        return players.size();
     }
 }
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index 24f52fde099bac6f7c6a61cfc28a2b23437a116d..7be604ee3f36f9e418b144c8e791476850dfd919 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -2,7 +2,6 @@ package net.minecraft.server.players;
 
 import co.aikar.timings.MinecraftTimings;
 import com.google.common.collect.Lists;
-import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
 import com.mojang.authlib.GameProfile;
 import com.mojang.logging.LogUtils;
@@ -101,7 +100,6 @@ import org.bukkit.Location;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.CraftWorld;
 import org.bukkit.craftbukkit.entity.CraftPlayer;
-import org.bukkit.craftbukkit.util.CraftChatMessage;
 import org.bukkit.craftbukkit.util.CraftLocation;
 import org.bukkit.entity.Player;
 import org.bukkit.event.entity.EntityRemoveEvent;
@@ -111,7 +109,6 @@ import org.bukkit.event.player.PlayerLoginEvent;
 import org.bukkit.event.player.PlayerQuitEvent;
 import org.bukkit.event.player.PlayerRespawnEvent;
 import org.bukkit.event.player.PlayerRespawnEvent.RespawnReason;
-import org.bukkit.event.player.PlayerSpawnChangeEvent;
 // CraftBukkit end
 import top.leavesmc.leaves.replay.ServerPhotographer;
 import ca.spottedleaf.concurrentutil.executor.standard.PrioritisedExecutor;
@@ -367,7 +364,7 @@ public abstract class PlayerList {
         if (usercache != null) {
             Optional<GameProfile> optional = usercache.get(gameprofile.getId());
 
-            s = (String) optional.map(GameProfile::getName).orElse(gameprofile.getName());
+            s = optional.map(GameProfile::getName).orElse(gameprofile.getName());
             usercache.add(gameprofile);
         } else {
             s = gameprofile.getName();
@@ -456,7 +453,6 @@ public abstract class PlayerList {
         // Folia end - region threading - rewrite login process
         // Paper end - Entity#getEntitySpawnReason
         // Folia start - region threading - rewrite login process
-        return;
     }
     // nbttagcomound -> player data
     // s -> last known name
@@ -551,9 +547,9 @@ public abstract class PlayerList {
         PlayerJoinEvent playerJoinEvent = new PlayerJoinEvent(bukkitPlayer, io.papermc.paper.adventure.PaperAdventure.asAdventure(ichatmutablecomponent)); // Paper - Adventure
         this.cserver.getPluginManager().callEvent(playerJoinEvent);
 
-        if (!player.connection.isAcceptingMessages()) {
+        //if (!player.connection.isAcceptingMessages()) {
             //return; // Folia - region threading - must still allow the player to connect, as we must add to chunk map before handling disconnect
-        }
+        //}
 
         final net.kyori.adventure.text.Component jm = playerJoinEvent.joinMessage();
 
@@ -615,11 +611,8 @@ public abstract class PlayerList {
 
         worldserver1 = player.serverLevel(); // CraftBukkit - Update in case join event changed it
         // CraftBukkit end
-        Iterator iterator = player.getActiveEffects().iterator();
-
-        while (iterator.hasNext()) {
-            MobEffectInstance mobeffect = (MobEffectInstance) iterator.next();
 
+        for (MobEffectInstance mobeffect : player.getActiveEffects()) {
             playerconnection.send(new ClientboundUpdateMobEffectPacket(player.getId(), mobeffect));
         }
 
@@ -641,15 +634,14 @@ public abstract class PlayerList {
         if (nbttagcompound != null && nbttagcompound.contains("RootVehicle", 10)) {
             CompoundTag nbttagcompound1 = nbttagcompound.getCompound("RootVehicle");
             // CraftBukkit start
-            ServerLevel finalWorldServer = worldserver1;
             Vec3 playerPos = player.position(); // Paper - force sync root vehicle to player position
-            Entity entity = EntityType.loadEntityRecursive(nbttagcompound1.getCompound("Entity"), finalWorldServer, (entity1) -> {
+            Entity entity = EntityType.loadEntityRecursive(nbttagcompound1.getCompound("Entity"), worldserver1, (entity1) -> {
                 // Paper start - force sync root vehicle to player position
                 if (entity1.distanceToSqr(player) > (5.0 * 5.0)) {
                     entity1.setPosRaw(playerPos.x, playerPos.y, playerPos.z, true);
                 }
                 // Paper end - force sync root vehicle to player position
-                return !finalWorldServer.addWithUUID(entity1, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.MOUNT) ? null : entity1; // Paper - Entity#getEntitySpawnReason
+                return !worldserver1.addWithUUID(entity1, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.MOUNT) ? null : entity1; // Paper - Entity#getEntitySpawnReason
                 // CraftBukkit end
             });
 
@@ -710,29 +702,19 @@ public abstract class PlayerList {
 
     public void updateEntireScoreboard(ServerScoreboard scoreboard, ServerPlayer player) {
         Set<Objective> set = Sets.newHashSet();
-        Iterator iterator = scoreboard.getPlayerTeams().iterator();
-
-        while (iterator.hasNext()) {
-            PlayerTeam scoreboardteam = (PlayerTeam) iterator.next();
-
+        for (PlayerTeam scoreboardteam : scoreboard.getPlayerTeams()) {
             player.connection.send(ClientboundSetPlayerTeamPacket.createAddOrModifyPacket(scoreboardteam, true));
         }
 
         DisplaySlot[] adisplayslot = DisplaySlot.values();
-        int i = adisplayslot.length;
 
-        for (int j = 0; j < i; ++j) {
-            DisplaySlot displayslot = adisplayslot[j];
+        for (DisplaySlot displayslot : adisplayslot) {
             Objective scoreboardobjective = scoreboard.getDisplayObjective(displayslot);
 
             if (scoreboardobjective != null && !set.contains(scoreboardobjective)) {
                 List<Packet<?>> list = scoreboard.getStartTrackingPackets(scoreboardobjective);
-                Iterator iterator1 = list.iterator();
-
-                while (iterator1.hasNext()) {
-                    Packet<?> packet = (Packet) iterator1.next();
-
-                    player.connection.send(packet);
+                for (Packet<?> value : list) {
+                    player.connection.send(value);
                 }
 
                 set.add(scoreboardobjective);
@@ -797,13 +779,13 @@ public abstract class PlayerList {
         if (!player.getBukkitEntity().isPersistent()) return; // CraftBukkit
         player.lastSave = System.nanoTime(); // Folia - region threading - changed to nanoTime tracking
         this.playerIo.save(player);
-        ServerStatsCounter serverstatisticmanager = (ServerStatsCounter) player.getStats(); // CraftBukkit
+        ServerStatsCounter serverstatisticmanager = player.getStats(); // CraftBukkit
 
         if (serverstatisticmanager != null) {
             serverstatisticmanager.save();
         }
 
-        PlayerAdvancements advancementdataplayer = (PlayerAdvancements) player.getAdvancements(); // CraftBukkit
+        PlayerAdvancements advancementdataplayer = player.getAdvancements(); // CraftBukkit
 
         if (advancementdataplayer != null) {
             advancementdataplayer.save();
@@ -930,7 +912,7 @@ public abstract class PlayerList {
         this.playersByName.remove(entityplayer.getScoreboardName().toLowerCase(java.util.Locale.ROOT)); // Spigot
         this.server.getCustomBossEvents().onPlayerDisconnect(entityplayer);
         UUID uuid = entityplayer.getUUID();
-        ServerPlayer entityplayer1 = (ServerPlayer) this.playersByUUID.get(uuid);
+        ServerPlayer entityplayer1 = this.playersByUUID.get(uuid);
 
         if (entityplayer1 == entityplayer) {
             this.playersByUUID.remove(uuid);
@@ -963,18 +945,18 @@ public abstract class PlayerList {
         MutableComponent ichatmutablecomponent;
 
         // Moved from processLogin
-        UUID uuid = gameprofile.getId();
-        List<ServerPlayer> list = Lists.newArrayList();
+        // UUID uuid = gameprofile.getId();
+        // List<ServerPlayer> list = Lists.newArrayList();
 
-        ServerPlayer entityplayer;
+        // ServerPlayer entityplayer;
 
         // Folia - region threading - rewrite login process - moved to pushPendingJoin
 
-        Iterator iterator = list.iterator();
+        // Iterator iterator = list.iterator();
 
-        while (iterator.hasNext()) {
+        //while (iterator.hasNext()) {
             // Folia - moved to pushPendingJoin
-        }
+        //}
 
         // Instead of kicking then returning, we need to store the kick reason
         // in the event, check with plugins to see if it's ok, and THEN kick
@@ -1103,21 +1085,16 @@ public abstract class PlayerList {
         WorldServer worldserver1 = worldserver != null && optional.isPresent() ? worldserver : this.server.overworld();
         EntityPlayer entityplayer1 = new EntityPlayer(this.server, worldserver1, entityplayer.getGameProfile(), entityplayer.clientInformation());
         // */
-        ServerPlayer entityplayer1 = entityplayer;
         org.bukkit.World fromWorld = entityplayer.getBukkitEntity().getWorld();
         entityplayer.wonGame = false;
         // CraftBukkit end
 
-        entityplayer1.connection = entityplayer.connection;
-        entityplayer1.restoreFrom(entityplayer, flag);
-        entityplayer1.setId(entityplayer.getId());
-        entityplayer1.setMainArm(entityplayer.getMainArm());
-        Iterator iterator = entityplayer.getTags().iterator();
-
-        while (iterator.hasNext()) {
-            String s = (String) iterator.next();
-
-            entityplayer1.addTag(s);
+        entityplayer.connection = entityplayer.connection;
+        entityplayer.restoreFrom(entityplayer, flag);
+        entityplayer.setId(entityplayer.getId());
+        entityplayer.setMainArm(entityplayer.getMainArm());
+        for (String s : entityplayer.getTags()) {
+            entityplayer.addTag(s);
         }
 
         boolean flag2 = false;
@@ -1162,18 +1139,18 @@ public abstract class PlayerList {
                     isBedSpawn = true;
                     location = CraftLocation.toBukkit(vec3d, worldserver1.getWorld(), f1, 0.0F);
                 } else if (blockposition != null) {
-                    entityplayer1.connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.NO_RESPAWN_BLOCK_AVAILABLE, 0.0F));
-                    entityplayer1.setRespawnPosition(null, null, 0f, false, false, com.destroystokyo.paper.event.player.PlayerSetSpawnEvent.Cause.PLAYER_RESPAWN); // CraftBukkit - SPIGOT-5988: Clear respawn location when obstructed // Paper - Add PlayerSetSpawnEvent
+                    entityplayer.connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.NO_RESPAWN_BLOCK_AVAILABLE, 0.0F));
+                    entityplayer.setRespawnPosition(null, null, 0f, false, false, com.destroystokyo.paper.event.player.PlayerSetSpawnEvent.Cause.PLAYER_RESPAWN); // CraftBukkit - SPIGOT-5988: Clear respawn location when obstructed // Paper - Add PlayerSetSpawnEvent
                 }
             }
 
             if (location == null) {
                 worldserver1 = this.server.getLevel(Level.OVERWORLD);
-                blockposition = entityplayer1.getSpawnPoint(worldserver1);
+                blockposition = entityplayer.getSpawnPoint(worldserver1);
                 location = CraftLocation.toBukkit(blockposition, worldserver1.getWorld(), worldserver1.levelData.getSpawnAngle(), 0.0F).add(0.5F, 0.1F, 0.5F); // Paper - Expose world spawn angle
             }
 
-            Player respawnPlayer = entityplayer1.getBukkitEntity();
+            Player respawnPlayer = entityplayer.getBukkitEntity();
             PlayerRespawnEvent respawnEvent = new PlayerRespawnEvent(respawnPlayer, location, isBedSpawn && !isAnchorSpawn, isAnchorSpawn, reason, com.google.common.collect.ImmutableSet.<org.bukkit.event.player.PlayerRespawnEvent.RespawnFlag>builder().add(respawnFlags)); // Paper - PlayerRespawnEvent changes
             this.cserver.getPluginManager().callEvent(respawnEvent);
             // Spigot Start
@@ -1194,45 +1171,45 @@ public abstract class PlayerList {
             location.setWorld(worldserver.getWorld());
         }
         ServerLevel worldserver1 = ((CraftWorld) location.getWorld()).getHandle();
-        entityplayer1.spawnIn(worldserver1);
-        entityplayer1.unsetRemoved();
-        entityplayer1.setShiftKeyDown(false);
-        entityplayer1.forceSetPositionRotation(location.getX(), location.getY(), location.getZ(), location.getYaw(), location.getPitch());
+        entityplayer.spawnIn(worldserver1);
+        entityplayer.unsetRemoved();
+        entityplayer.setShiftKeyDown(false);
+        entityplayer.forceSetPositionRotation(location.getX(), location.getY(), location.getZ(), location.getYaw(), location.getPitch());
 
         worldserver1.getChunkSource().addRegionTicket(net.minecraft.server.level.TicketType.POST_TELEPORT, new net.minecraft.world.level.ChunkPos(location.getBlockX() >> 4, location.getBlockZ() >> 4), 1, entityplayer.getId()); // Paper
-        while (avoidSuffocation && !worldserver1.noCollision(entityplayer1, entityplayer1.getBoundingBox(), true) && entityplayer1.getY() < (double) worldserver1.getMaxBuildHeight()) { // Paper - make sure this loads chunks, we default to NOT loading now
+        while (avoidSuffocation && !worldserver1.noCollision(entityplayer, entityplayer.getBoundingBox(), true) && entityplayer.getY() < (double) worldserver1.getMaxBuildHeight()) { // Paper - make sure this loads chunks, we default to NOT loading now
             // CraftBukkit end
-            entityplayer1.setPos(entityplayer1.getX(), entityplayer1.getY() + 1.0D, entityplayer1.getZ());
+            entityplayer.setPos(entityplayer.getX(), entityplayer.getY() + 1.0D, entityplayer.getZ());
         }
 
         int i = flag ? 1 : 0;
-        ServerLevel worldserver2 = entityplayer1.serverLevel();
+        ServerLevel worldserver2 = entityplayer.serverLevel();
         LevelData worlddata = worldserver2.getLevelData();
 
-        entityplayer1.connection.send(new ClientboundRespawnPacket(entityplayer1.createCommonSpawnInfo(worldserver2), (byte) i));
-        entityplayer1.connection.send(new ClientboundSetChunkCacheRadiusPacket(worldserver1.getWorld().getSendViewDistance())); // Spigot // Paper - replace old player chunk management
-        entityplayer1.connection.send(new ClientboundSetSimulationDistancePacket(worldserver1.getWorld().getSimulationDistance())); // Spigot // Paper - replace old player chunk management
-        entityplayer1.connection.teleport(CraftLocation.toBukkit(entityplayer1.position(), worldserver2.getWorld(), entityplayer1.getYRot(), entityplayer1.getXRot())); // CraftBukkit
-        entityplayer1.connection.send(new ClientboundSetDefaultSpawnPositionPacket(worldserver1.getSharedSpawnPos(), worldserver1.getSharedSpawnAngle()));
-        entityplayer1.connection.send(new ClientboundChangeDifficultyPacket(worlddata.getDifficulty(), worlddata.isDifficultyLocked()));
-        entityplayer1.connection.send(new ClientboundSetExperiencePacket(entityplayer1.experienceProgress, entityplayer1.totalExperience, entityplayer1.experienceLevel));
-        this.sendLevelInfo(entityplayer1, worldserver1);
-        this.sendPlayerPermissionLevel(entityplayer1);
+        entityplayer.connection.send(new ClientboundRespawnPacket(entityplayer.createCommonSpawnInfo(worldserver2), (byte) i));
+        entityplayer.connection.send(new ClientboundSetChunkCacheRadiusPacket(worldserver1.getWorld().getSendViewDistance())); // Spigot // Paper - replace old player chunk management
+        entityplayer.connection.send(new ClientboundSetSimulationDistancePacket(worldserver1.getWorld().getSimulationDistance())); // Spigot // Paper - replace old player chunk management
+        entityplayer.connection.teleport(CraftLocation.toBukkit(entityplayer.position(), worldserver2.getWorld(), entityplayer.getYRot(), entityplayer.getXRot())); // CraftBukkit
+        entityplayer.connection.send(new ClientboundSetDefaultSpawnPositionPacket(worldserver1.getSharedSpawnPos(), worldserver1.getSharedSpawnAngle()));
+        entityplayer.connection.send(new ClientboundChangeDifficultyPacket(worlddata.getDifficulty(), worlddata.isDifficultyLocked()));
+        entityplayer.connection.send(new ClientboundSetExperiencePacket(entityplayer.experienceProgress, entityplayer.totalExperience, entityplayer.experienceLevel));
+        this.sendLevelInfo(entityplayer, worldserver1);
+        this.sendPlayerPermissionLevel(entityplayer);
         if (!entityplayer.connection.isDisconnected()) {
-            worldserver1.addRespawnedPlayer(entityplayer1);
-            this.players.add(entityplayer1);
-            this.playersByName.put(entityplayer1.getScoreboardName().toLowerCase(java.util.Locale.ROOT), entityplayer1); // Spigot
-            this.playersByUUID.put(entityplayer1.getUUID(), entityplayer1);
+            worldserver1.addRespawnedPlayer(entityplayer);
+            this.players.add(entityplayer);
+            this.playersByName.put(entityplayer.getScoreboardName().toLowerCase(java.util.Locale.ROOT), entityplayer); // Spigot
+            this.playersByUUID.put(entityplayer.getUUID(), entityplayer);
         }
         // entityplayer1.initInventoryMenu();
-        entityplayer1.setHealth(entityplayer1.getHealth());
+        entityplayer.setHealth(entityplayer.getHealth());
         // Paper start - Fix SPIGOT-5989
         if (flag2 && !isLocAltered) {
             if (!flag1) {
                 BlockState data = worldserver1.getBlockState(blockposition);
                 worldserver1.setBlock(blockposition, data.setValue(net.minecraft.world.level.block.RespawnAnchorBlock.CHARGE, data.getValue(net.minecraft.world.level.block.RespawnAnchorBlock.CHARGE) - 1), 3);
             }
-            entityplayer1.connection.send(new ClientboundSoundPacket(SoundEvents.RESPAWN_ANCHOR_DEPLETE, SoundSource.BLOCKS, (double) location.getX(), (double) location.getY(), (double) location.getZ(), 1.0F, 1.0F, worldserver1.getRandom().nextLong()));
+            entityplayer.connection.send(new ClientboundSoundPacket(SoundEvents.RESPAWN_ANCHOR_DEPLETE, SoundSource.BLOCKS, location.getX(), location.getY(), location.getZ(), 1.0F, 1.0F, worldserver1.getRandom().nextLong()));
         // Paper end - Fix SPIGOT-5989
         }
         // Added from changeDimension
@@ -1263,7 +1240,7 @@ public abstract class PlayerList {
         // Paper end - Add PlayerPostRespawnEvent
 
         // CraftBukkit end
-        return entityplayer1;
+        return entityplayer;
     }
 
     public void sendPlayerPermissionLevel(ServerPlayer player) {
@@ -1299,11 +1276,7 @@ public abstract class PlayerList {
     }
 
     public void broadcastAll(Packet<?> packet) {
-        Iterator iterator = this.players.iterator();
-
-        while (iterator.hasNext()) {
-            ServerPlayer entityplayer = (ServerPlayer) iterator.next();
-
+        for (ServerPlayer entityplayer : this.players) {
             entityplayer.connection.send(packet);
         }
 
@@ -1328,11 +1301,7 @@ public abstract class PlayerList {
     // CraftBukkit end
 
     public void broadcastAll(Packet<?> packet, ResourceKey<Level> dimension) {
-        Iterator iterator = this.players.iterator();
-
-        while (iterator.hasNext()) {
-            ServerPlayer entityplayer = (ServerPlayer) iterator.next();
-
+        for (ServerPlayer entityplayer : this.players) {
             if (entityplayer.level().dimension() == dimension) {
                 entityplayer.connection.send(packet);
             }
@@ -1345,10 +1314,8 @@ public abstract class PlayerList {
 
         if (scoreboardteam != null) {
             Collection<String> collection = scoreboardteam.getPlayers();
-            Iterator iterator = collection.iterator();
 
-            while (iterator.hasNext()) {
-                String s = (String) iterator.next();
+            for (String s : collection) {
                 ServerPlayer entityplayer = this.getPlayerByName(s);
 
                 if (entityplayer != null && entityplayer != source) {
@@ -1380,7 +1347,7 @@ public abstract class PlayerList {
         String[] astring = new String[players.size()];
 
         for (int i = 0; i < players.size(); ++i) {
-            astring[i] = ((ServerPlayer) players.get(i)).getGameProfile().getName();
+            astring[i] = players.get(i).getGameProfile().getName();
             // Folia end - region threading
         }
 
@@ -1602,11 +1569,7 @@ public abstract class PlayerList {
 
     public List<ServerPlayer> getPlayersWithAddress(String ip) {
         List<ServerPlayer> list = Lists.newArrayList();
-        Iterator iterator = this.players.iterator();
-
-        while (iterator.hasNext()) {
-            ServerPlayer entityplayer = (ServerPlayer) iterator.next();
-
+        for (ServerPlayer entityplayer : this.players) {
             if (entityplayer.getIpAddress().equals(ip)) {
                 list.add(entityplayer);
             }
@@ -1660,7 +1623,7 @@ public abstract class PlayerList {
         // CraftBukkit start - disconnect safely
         for (ServerPlayer player : this.players) {
             if (isRestarting) player.connection.disconnect(org.spigotmc.SpigotConfig.restartMessage, org.bukkit.event.player.PlayerKickEvent.Cause.UNKNOWN); else // Paper - kick event cause (cause is never used here)
-            player.connection.disconnect(this.server.server.shutdownMessage(), org.bukkit.event.player.PlayerKickEvent.Cause.UNKNOWN); // CraftBukkit - add custom shutdown message // Paper - Adventure & KickEventCause (cause is never used here)
+                player.connection.disconnect(this.server.server.shutdownMessage(), org.bukkit.event.player.PlayerKickEvent.Cause.UNKNOWN); // CraftBukkit - add custom shutdown message // Paper - Adventure & KickEventCause (cause is never used here)
         }
         // CraftBukkit end
 
@@ -1689,11 +1652,8 @@ public abstract class PlayerList {
 
     public void broadcastSystemMessage(Component message, Function<ServerPlayer, Component> playerMessageFactory, boolean overlay) {
         this.server.sendSystemMessage(message);
-        Iterator iterator = this.players.iterator();
-
-        while (iterator.hasNext()) {
-            ServerPlayer entityplayer = (ServerPlayer) iterator.next();
-            Component ichatbasecomponent1 = (Component) playerMessageFactory.apply(entityplayer);
+        for (ServerPlayer entityplayer : this.players) {
+            Component ichatbasecomponent1 = playerMessageFactory.apply(entityplayer);
 
             if (ichatbasecomponent1 != null) {
                 entityplayer.sendSystemMessage(ichatbasecomponent1, overlay);
@@ -1732,7 +1692,7 @@ public abstract class PlayerList {
         boolean flag2;
         Packet<?> disguised = sender != null && unsignedFunction == null ? new net.minecraft.network.protocol.game.ClientboundDisguisedChatPacket(outgoingchatmessage.content(), params.toNetwork(sender.level().registryAccess())) : null; // Paper - don't send player chat packets from vanished players
 
-        for (Iterator iterator = this.players.iterator(); iterator.hasNext(); flag1 |= flag2 && message.isFullyFiltered()) {
+        for (Iterator<ServerPlayer> iterator = this.players.iterator(); iterator.hasNext(); flag1 |= flag2 && message.isFullyFiltered()) {
             ServerPlayer entityplayer1 = (ServerPlayer) iterator.next();
 
             flag2 = shouldSendFiltered.test(entityplayer1);
@@ -1806,31 +1766,22 @@ public abstract class PlayerList {
     public void setViewDistance(int viewDistance) {
         this.viewDistance = viewDistance;
         //this.broadcastAll(new ClientboundSetChunkCacheRadiusPacket(viewDistance)); // Paper - move into setViewDistance
-        Iterator iterator = this.server.getAllLevels().iterator();
-
-        while (iterator.hasNext()) {
-            ServerLevel worldserver = (ServerLevel) iterator.next();
-
+        for (ServerLevel worldserver : this.server.getAllLevels()) {
             if (worldserver != null) {
                 worldserver.getChunkSource().setViewDistance(viewDistance);
             }
         }
-
     }
 
     public void setSimulationDistance(int simulationDistance) {
         this.simulationDistance = simulationDistance;
         //this.broadcastAll(new ClientboundSetSimulationDistancePacket(simulationDistance)); // Paper - handled by playerchunkloader
-        Iterator iterator = this.server.getAllLevels().iterator();
-
-        while (iterator.hasNext()) {
-            ServerLevel worldserver = (ServerLevel) iterator.next();
 
+        for (ServerLevel worldserver : this.server.getAllLevels()) {
             if (worldserver != null) {
                 worldserver.getChunkSource().setSimulationDistance(simulationDistance);
             }
         }
-
     }
 
     public List<ServerPlayer> getPlayers() {
@@ -1839,7 +1790,7 @@ public abstract class PlayerList {
 
     @Nullable
     public ServerPlayer getPlayer(UUID uuid) {
-        return (ServerPlayer) this.playersByUUID.get(uuid);
+        return this.playersByUUID.get(uuid);
     }
 
     public boolean canBypassPlayerLimit(GameProfile profile) {
@@ -1879,11 +1830,8 @@ public abstract class PlayerList {
     public void reloadRecipeData() {
         // Paper end - API for updating recipes on clients
         ClientboundUpdateRecipesPacket packetplayoutrecipeupdate = new ClientboundUpdateRecipesPacket(this.server.getRecipeManager().getRecipes());
-        Iterator iterator1 = this.players.iterator();
-
-        while (iterator1.hasNext()) {
-            ServerPlayer entityplayer = (ServerPlayer) iterator1.next();
 
+        for (ServerPlayer entityplayer : this.players) {
             entityplayer.connection.send(packetplayoutrecipeupdate);
             entityplayer.getRecipeBook().sendInitialRecipeBook(entityplayer);
         }
diff --git a/src/main/java/org/spigotmc/TicksPerSecondCommand.java b/src/main/java/org/spigotmc/TicksPerSecondCommand.java
index 9eb2823cc8f83bad2626fc77578b0162d9ed5782..5809532622b20afa1543d1df32b87bb7b4bd02ba 100644
--- a/src/main/java/org/spigotmc/TicksPerSecondCommand.java
+++ b/src/main/java/org/spigotmc/TicksPerSecondCommand.java
@@ -1,7 +1,5 @@
 package org.spigotmc;
 
-import net.minecraft.server.MinecraftServer;
-import org.bukkit.ChatColor;
 import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
 
