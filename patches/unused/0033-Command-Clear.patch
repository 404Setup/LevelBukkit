From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: 404Setup <153366651+404Setup@users.noreply.github.com>
Date: Tue, 18 Jun 2024 09:32:50 +0800
Subject: [PATCH] Command Clear


diff --git a/src/main/java/net/minecraft/server/commands/ListPlayersCommand.java b/src/main/java/net/minecraft/server/commands/ListPlayersCommand.java
index 73180c617945610e11b777733655f9e2c4c1dd0c..350aa87eb7ee41fdace1c6132c5cc1df46d73a9e 100644
--- a/src/main/java/net/minecraft/server/commands/ListPlayersCommand.java
+++ b/src/main/java/net/minecraft/server/commands/ListPlayersCommand.java
@@ -1,7 +1,6 @@
 package net.minecraft.server.commands;
 
 import com.mojang.brigadier.CommandDispatcher;
-import com.mojang.brigadier.builder.LiteralArgumentBuilder;
 import java.util.List;
 import java.util.function.Function;
 import net.minecraft.commands.CommandSourceStack;
@@ -16,10 +15,10 @@ public class ListPlayersCommand {
     public ListPlayersCommand() {}
 
     public static void register(CommandDispatcher<CommandSourceStack> dispatcher) {
-        dispatcher.register((LiteralArgumentBuilder) ((LiteralArgumentBuilder) net.minecraft.commands.Commands.literal("list").executes((commandcontext) -> {
-            return ListPlayersCommand.listPlayers((CommandSourceStack) commandcontext.getSource());
+        dispatcher.register((net.minecraft.commands.Commands.literal("list").executes((commandcontext) -> {
+            return ListPlayersCommand.listPlayers(commandcontext.getSource());
         })).then(net.minecraft.commands.Commands.literal("uuids").executes((commandcontext) -> {
-            return ListPlayersCommand.listPlayersWithUuids((CommandSourceStack) commandcontext.getSource());
+            return ListPlayersCommand.listPlayersWithUuids(commandcontext.getSource());
         })));
     }
 
@@ -37,17 +36,15 @@ public class ListPlayersCommand {
         PlayerList playerlist = source.getServer().getPlayerList();
         // CraftBukkit start
         List<ServerPlayer> players = playerlist.getPlayers();
-        if (source.getBukkitSender() instanceof org.bukkit.entity.Player) {
-            org.bukkit.entity.Player sender = (org.bukkit.entity.Player) source.getBukkitSender();
-            players = players.stream().filter((ep) -> sender.canSee(ep.getBukkitEntity())).collect(java.util.stream.Collectors.toList());
+        if (source.getBukkitSender() instanceof org.bukkit.entity.Player sender) {
+            players = players.stream().filter((ep) -> sender.canSee(ep.getBukkitEntity())).toList();
+                    //.collect(java.util.stream.Collectors.toList());
         }
-        List<ServerPlayer> list = players;
         // CraftBukkit end
-        Component ichatbasecomponent = ComponentUtils.formatList(list, nameProvider);
+        Component ichatbasecomponent = ComponentUtils.formatList(players, nameProvider);
+        final int size = players.size();
 
-        source.sendSuccess(() -> {
-            return Component.translatable("commands.list.players", list.size(), playerlist.getMaxPlayers(), ichatbasecomponent);
-        }, false);
-        return list.size();
+        source.sendSuccess(() -> Component.translatable("commands.list.players", size, playerlist.getMaxPlayers(), ichatbasecomponent), false);
+        return players.size();
     }
 }
diff --git a/src/main/java/net/minecraft/server/commands/LocateCommand.java b/src/main/java/net/minecraft/server/commands/LocateCommand.java
index 74a00a9b636b7457c54f9e76f60432de1701239b..a8f1a64bd220daf5b1610b91ff7a8bd22232cedd 100644
--- a/src/main/java/net/minecraft/server/commands/LocateCommand.java
+++ b/src/main/java/net/minecraft/server/commands/LocateCommand.java
@@ -96,12 +96,12 @@ public class LocateCommand {
         ResourceOrTagKeyArgument.Result<Structure> predicate, Registry<Structure> structureRegistry
     ) {
         return predicate.unwrap()
-            .map(key -> structureRegistry.getHolder((ResourceKey<Structure>)key).map(entry -> HolderSet.direct(entry)), structureRegistry::getTag);
+            .map(key -> structureRegistry.getHolder(key).map(HolderSet::direct), structureRegistry::getTag);
     }
 
     private static int locateStructure(CommandSourceStack source, ResourceOrTagKeyArgument.Result<Structure> predicate) throws CommandSyntaxException {
         Registry<Structure> registry = source.getLevel().registryAccess().registryOrThrow(Registries.STRUCTURE);
-        HolderSet<Structure> holderSet = (HolderSet<Structure>)getHolders(predicate, registry)
+        HolderSet<Structure> holderSet = getHolders(predicate, registry)
             .orElseThrow(() -> ERROR_STRUCTURE_INVALID.create(predicate.asPrintable()));
         BlockPos blockPos = BlockPos.containing(source.getPosition());
         ServerLevel serverLevel = source.getLevel();
@@ -192,7 +192,7 @@ public class LocateCommand {
                         .withHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT, Component.translatable("chat.coordinates.tooltip")))
             );
         source.sendSuccess(() -> Component.translatable(successMessage, entryString, component, i), false);
-        LOGGER.info("Locating element " + entryString + " took " + timeTaken.toMillis() + " ms");
+        LOGGER.info("Locating element {} took {} ms", entryString, timeTaken.toMillis());
         return i;
     }
 
diff --git a/src/main/java/net/minecraft/server/commands/LootCommand.java b/src/main/java/net/minecraft/server/commands/LootCommand.java
index e9e5c5252662f9f087ccd8d649d9a84379cde5c9..466e1bbb9fe91726778804b338b5f7ff83ecd605 100644
--- a/src/main/java/net/minecraft/server/commands/LootCommand.java
+++ b/src/main/java/net/minecraft/server/commands/LootCommand.java
@@ -121,11 +121,8 @@ public class LootCommand {
     private static int blockDistribute(CommandSourceStack source, BlockPos targetPos, List<ItemStack> stacks, LootCommand.Callback messageSender) throws CommandSyntaxException {
         Container iinventory = LootCommand.getContainer(source, targetPos);
         List<ItemStack> list1 = Lists.newArrayListWithCapacity(stacks.size());
-        Iterator iterator = stacks.iterator();
-
-        while (iterator.hasNext()) {
-            ItemStack itemstack = (ItemStack) iterator.next();
 
+        for (ItemStack itemstack : stacks) {
             if (LootCommand.distributeToContainer(iinventory, itemstack.copy())) {
                 iinventory.setChanged();
                 list1.add(itemstack);
diff --git a/src/main/java/net/minecraft/server/commands/ReloadCommand.java b/src/main/java/net/minecraft/server/commands/ReloadCommand.java
index c020c86194723a5c89816f91e0b7c5eeaf132b7e..2eacbdb7b467e87eb0419065b9efbb3ba6a65eda 100644
--- a/src/main/java/net/minecraft/server/commands/ReloadCommand.java
+++ b/src/main/java/net/minecraft/server/commands/ReloadCommand.java
@@ -31,11 +31,8 @@ public class ReloadCommand {
         dataPackManager.reload();
         Collection<String> collection1 = Lists.newArrayList(enabledDataPacks);
         Collection<String> collection2 = saveProperties.getDataConfiguration().dataPacks().getDisabled();
-        Iterator iterator = dataPackManager.getAvailableIds().iterator();
-
-        while (iterator.hasNext()) {
-            String s = (String) iterator.next();
 
+        for (String s : dataPackManager.getAvailableIds()) {
             if (!collection2.contains(s) && !collection1.contains(s)) {
                 collection1.add(s);
             }
diff --git a/src/main/java/net/minecraft/server/commands/SpreadPlayersCommand.java b/src/main/java/net/minecraft/server/commands/SpreadPlayersCommand.java
index b47a8a082170bcb630c4354be7c77a4cac71d105..6b30eaeb329e656f4c0bc96928244537474d04ce 100644
--- a/src/main/java/net/minecraft/server/commands/SpreadPlayersCommand.java
+++ b/src/main/java/net/minecraft/server/commands/SpreadPlayersCommand.java
@@ -85,11 +85,8 @@ public class SpreadPlayersCommand {
 
     private static int getNumberOfTeams(Collection<? extends Entity> entities) {
         Set<Team> set = Sets.newHashSet();
-        Iterator iterator = entities.iterator();
-
-        while (iterator.hasNext()) {
-            Entity entity = (Entity) iterator.next();
 
+        for (Entity entity : entities) {
             if (entity instanceof Player) {
                 set.add(entity.getTeam());
             } else {
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index 771b259ce930d2c857a08ca9150a243679c88c80..7ef9297332bf4783c820ded4be9dc91957801f64 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -2,7 +2,6 @@ package net.minecraft.server.players;
 
 import co.aikar.timings.MinecraftTimings;
 import com.google.common.collect.Lists;
-import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
 import com.mojang.authlib.GameProfile;
 import com.mojang.logging.LogUtils;
@@ -25,6 +24,8 @@ import java.util.UUID;
 import java.util.function.Function;
 import java.util.function.Predicate;
 import javax.annotation.Nullable;
+
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 import net.minecraft.ChatFormatting;
 import net.minecraft.FileUtil;
 import net.minecraft.commands.CommandSourceStack;
@@ -111,7 +112,6 @@ import org.bukkit.Location;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.CraftWorld;
 import org.bukkit.craftbukkit.entity.CraftPlayer;
-import org.bukkit.craftbukkit.util.CraftChatMessage;
 import org.bukkit.craftbukkit.util.CraftLocation;
 import org.bukkit.entity.Player;
 import org.bukkit.event.entity.EntityRemoveEvent;
@@ -121,7 +121,6 @@ import org.bukkit.event.player.PlayerLoginEvent;
 import org.bukkit.event.player.PlayerQuitEvent;
 import org.bukkit.event.player.PlayerRespawnEvent;
 import org.bukkit.event.player.PlayerRespawnEvent.RespawnReason;
-import org.bukkit.event.player.PlayerSpawnChangeEvent;
 // CraftBukkit end
 
 public abstract class PlayerList {
@@ -439,9 +438,9 @@ public abstract class PlayerList {
         PlayerJoinEvent playerJoinEvent = new PlayerJoinEvent(bukkitPlayer, io.papermc.paper.adventure.PaperAdventure.asAdventure(ichatmutablecomponent)); // Paper - Adventure
         this.cserver.getPluginManager().callEvent(playerJoinEvent);
 
-        if (!player.connection.isAcceptingMessages()) {
+        //if (!player.connection.isAcceptingMessages()) {
             //return; // Folia - region threading - must still allow the player to connect, as we must add to chunk map before handling disconnect
-        }
+        //}
 
         final net.kyori.adventure.text.Component jm = playerJoinEvent.joinMessage();
 
@@ -497,13 +496,11 @@ public abstract class PlayerList {
 
         worldserver1 = player.serverLevel(); // CraftBukkit - Update in case join event changed it
         // CraftBukkit end
-        Iterator iterator = player.getActiveEffects().iterator();
-
-        while (iterator.hasNext()) {
-            MobEffectInstance mobeffect = (MobEffectInstance) iterator.next();
 
+        for (MobEffectInstance mobeffect : player.getActiveEffects()) {
             playerconnection.send(new ClientboundUpdateMobEffectPacket(player.getId(), mobeffect, false));
         }
+
         // Paper start - Fire PlayerJoinEvent when Player is actually ready; move vehicle into method so it can be called above - short circuit around that code
         this.onPlayerJoinFinish(player, worldserver1, s1);
         // Paper start - Send empty chunk, so players aren't stuck in the world loading screen with our chunk system not sending chunks when dead
@@ -589,29 +586,21 @@ public abstract class PlayerList {
 
     public void updateEntireScoreboard(ServerScoreboard scoreboard, ServerPlayer player) {
         Set<Objective> set = Sets.newHashSet();
-        Iterator iterator = scoreboard.getPlayerTeams().iterator();
-
-        while (iterator.hasNext()) {
-            PlayerTeam scoreboardteam = (PlayerTeam) iterator.next();
 
+        for (PlayerTeam scoreboardteam : scoreboard.getPlayerTeams()) {
             player.connection.send(ClientboundSetPlayerTeamPacket.createAddOrModifyPacket(scoreboardteam, true));
         }
 
         DisplaySlot[] adisplayslot = DisplaySlot.values();
-        int i = adisplayslot.length;
 
-        for (int j = 0; j < i; ++j) {
-            DisplaySlot displayslot = adisplayslot[j];
+        for (DisplaySlot displayslot : adisplayslot) {
             Objective scoreboardobjective = scoreboard.getDisplayObjective(displayslot);
 
             if (scoreboardobjective != null && !set.contains(scoreboardobjective)) {
                 List<Packet<?>> list = scoreboard.getStartTrackingPackets(scoreboardobjective);
-                Iterator iterator1 = list.iterator();
 
-                while (iterator1.hasNext()) {
-                    Packet<?> packet = (Packet) iterator1.next();
-
-                    player.connection.send(packet);
+                for (Packet<?> value : list) {
+                    player.connection.send(value);
                 }
 
                 set.add(scoreboardobjective);
@@ -675,13 +664,13 @@ public abstract class PlayerList {
         if (!player.getBukkitEntity().isPersistent()) return; // CraftBukkit
         player.lastSave = System.nanoTime(); // Folia - region threading - changed to nanoTime tracking
         this.playerIo.save(player);
-        ServerStatsCounter serverstatisticmanager = (ServerStatsCounter) player.getStats(); // CraftBukkit
+        ServerStatsCounter serverstatisticmanager = player.getStats(); // CraftBukkit
 
         if (serverstatisticmanager != null) {
             serverstatisticmanager.save();
         }
 
-        PlayerAdvancements advancementdataplayer = (PlayerAdvancements) player.getAdvancements(); // CraftBukkit
+        PlayerAdvancements advancementdataplayer = player.getAdvancements(); // CraftBukkit
 
         if (advancementdataplayer != null) {
             advancementdataplayer.save();
@@ -792,18 +781,18 @@ public abstract class PlayerList {
         MutableComponent ichatmutablecomponent;
 
         // Moved from processLogin
-        UUID uuid = gameprofile.getId();
-        List<ServerPlayer> list = Lists.newArrayList();
+        //UUID uuid = gameprofile.getId();
+        //List<ServerPlayer> list = Lists.newArrayList();
 
-        ServerPlayer entityplayer;
+        //ServerPlayer entityplayer;
 
         // Folia - region threading - rewrite login process - moved to pushPendingJoin
 
-        Iterator iterator = list.iterator();
+        //Iterator iterator = list.iterator();
 
-        while (iterator.hasNext()) {
+        //while (iterator.hasNext()) {
             // Folia - moved to pushPendingJoin
-        }
+        //}
 
         // Instead of kicking then returning, we need to store the kick reason
         // in the event, check with plugins to see if it's ok, and THEN kick
@@ -942,11 +931,8 @@ public abstract class PlayerList {
         entityplayer1.restoreFrom(entityplayer, flag);
         entityplayer1.setId(entityplayer.getId());
         entityplayer1.setMainArm(entityplayer.getMainArm());
-        Iterator iterator = entityplayer.getTags().iterator();
-
-        while (iterator.hasNext()) {
-            String s = (String) iterator.next();
 
+        for (String s : entityplayer.getTags()) {
             entityplayer1.addTag(s);
         }
 
@@ -1129,14 +1115,9 @@ public abstract class PlayerList {
     }
 
     public void broadcastAll(Packet<?> packet) {
-        Iterator iterator = this.players.iterator();
-
-        while (iterator.hasNext()) {
-            ServerPlayer entityplayer = (ServerPlayer) iterator.next();
-
+        for (ServerPlayer entityplayer : this.players) {
             entityplayer.connection.send(packet);
         }
-
     }
 
     // CraftBukkit start - add a world/entity limited version
@@ -1158,11 +1139,7 @@ public abstract class PlayerList {
     // CraftBukkit end
 
     public void broadcastAll(Packet<?> packet, ResourceKey<Level> dimension) {
-        Iterator iterator = this.players.iterator();
-
-        while (iterator.hasNext()) {
-            ServerPlayer entityplayer = (ServerPlayer) iterator.next();
-
+        for (ServerPlayer entityplayer : this.players) {
             if (entityplayer.level().dimension() == dimension) {
                 entityplayer.connection.send(packet);
             }
@@ -1175,10 +1152,8 @@ public abstract class PlayerList {
 
         if (scoreboardteam != null) {
             Collection<String> collection = scoreboardteam.getPlayers();
-            Iterator iterator = collection.iterator();
 
-            while (iterator.hasNext()) {
-                String s = (String) iterator.next();
+            for (String s : collection) {
                 ServerPlayer entityplayer = this.getPlayerByName(s);
 
                 if (entityplayer != null && entityplayer != source) {
@@ -1206,11 +1181,11 @@ public abstract class PlayerList {
     }
 
     public String[] getPlayerNamesArray() {
-        List<ServerPlayer> players = new java.util.ArrayList<>(this.players); // Folia start - region threading
+        List<ServerPlayer> players = new ObjectArrayList<>(this.players); // Folia start - region threading
         String[] astring = new String[players.size()];
 
         for (int i = 0; i < players.size(); ++i) {
-            astring[i] = ((ServerPlayer) players.get(i)).getGameProfile().getName();
+            astring[i] = players.get(i).getGameProfile().getName();
             // Folia end - region threading
         }
 
@@ -1432,11 +1407,8 @@ public abstract class PlayerList {
 
     public List<ServerPlayer> getPlayersWithAddress(String ip) {
         List<ServerPlayer> list = Lists.newArrayList();
-        Iterator iterator = this.players.iterator();
-
-        while (iterator.hasNext()) {
-            ServerPlayer entityplayer = (ServerPlayer) iterator.next();
 
+        for (ServerPlayer entityplayer : this.players) {
             if (entityplayer.getIpAddress().equals(ip)) {
                 list.add(entityplayer);
             }
@@ -1519,11 +1491,9 @@ public abstract class PlayerList {
 
     public void broadcastSystemMessage(Component message, Function<ServerPlayer, Component> playerMessageFactory, boolean overlay) {
         this.server.sendSystemMessage(message);
-        Iterator iterator = this.players.iterator();
 
-        while (iterator.hasNext()) {
-            ServerPlayer entityplayer = (ServerPlayer) iterator.next();
-            Component ichatbasecomponent1 = (Component) playerMessageFactory.apply(entityplayer);
+        for (ServerPlayer entityplayer : this.players) {
+            Component ichatbasecomponent1 = playerMessageFactory.apply(entityplayer);
 
             if (ichatbasecomponent1 != null) {
                 entityplayer.sendSystemMessage(ichatbasecomponent1, overlay);
@@ -1562,7 +1532,7 @@ public abstract class PlayerList {
         boolean flag2;
         Packet<?> disguised = sender != null && unsignedFunction == null ? new net.minecraft.network.protocol.game.ClientboundDisguisedChatPacket(outgoingchatmessage.content(), params) : null; // Paper - don't send player chat packets from vanished players
 
-        for (Iterator iterator = this.players.iterator(); iterator.hasNext(); flag1 |= flag2 && message.isFullyFiltered()) {
+        for (Iterator<ServerPlayer> iterator = this.players.iterator(); iterator.hasNext(); flag1 |= flag2 && message.isFullyFiltered()) {
             ServerPlayer entityplayer1 = (ServerPlayer) iterator.next();
 
             flag2 = shouldSendFiltered.test(entityplayer1);
@@ -1636,11 +1606,8 @@ public abstract class PlayerList {
     public void setViewDistance(int viewDistance) {
         this.viewDistance = viewDistance;
         //this.broadcastAll(new ClientboundSetChunkCacheRadiusPacket(viewDistance)); // Paper - move into setViewDistance
-        Iterator iterator = this.server.getAllLevels().iterator();
-
-        while (iterator.hasNext()) {
-            ServerLevel worldserver = (ServerLevel) iterator.next();
 
+        for (ServerLevel worldserver : this.server.getAllLevels()) {
             if (worldserver != null) {
                 worldserver.getChunkSource().setViewDistance(viewDistance);
             }
@@ -1651,11 +1618,8 @@ public abstract class PlayerList {
     public void setSimulationDistance(int simulationDistance) {
         this.simulationDistance = simulationDistance;
         //this.broadcastAll(new ClientboundSetSimulationDistancePacket(simulationDistance)); // Paper - handled by playerchunkloader
-        Iterator iterator = this.server.getAllLevels().iterator();
-
-        while (iterator.hasNext()) {
-            ServerLevel worldserver = (ServerLevel) iterator.next();
 
+        for (ServerLevel worldserver : this.server.getAllLevels()) {
             if (worldserver != null) {
                 worldserver.getChunkSource().setSimulationDistance(simulationDistance);
             }
@@ -1709,11 +1673,8 @@ public abstract class PlayerList {
     public void reloadRecipeData() {
         // Paper end - API for updating recipes on clients
         ClientboundUpdateRecipesPacket packetplayoutrecipeupdate = new ClientboundUpdateRecipesPacket(this.server.getRecipeManager().getOrderedRecipes());
-        Iterator iterator1 = this.players.iterator();
-
-        while (iterator1.hasNext()) {
-            ServerPlayer entityplayer = (ServerPlayer) iterator1.next();
 
+        for (ServerPlayer entityplayer : this.players) {
             entityplayer.connection.send(packetplayoutrecipeupdate);
             entityplayer.getRecipeBook().sendInitialRecipeBook(entityplayer);
         }
