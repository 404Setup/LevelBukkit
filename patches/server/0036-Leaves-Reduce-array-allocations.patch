From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: 404Setup <153366651+404Setup@users.noreply.github.com>
Date: Sun, 9 Jun 2024 14:07:59 +0800
Subject: [PATCH] Leaves: Reduce array allocations

This patch is Powered by Gale(https://github.com/GaleMC/Gale)

diff --git a/src/main/java/com/destroystokyo/paper/entity/ai/MobGoalHelper.java b/src/main/java/com/destroystokyo/paper/entity/ai/MobGoalHelper.java
index 59699c59fdfc611177fdb3136f84ab539b17d9c9..3042834693926730ece07d50ef12354967adf534 100644
--- a/src/main/java/com/destroystokyo/paper/entity/ai/MobGoalHelper.java
+++ b/src/main/java/com/destroystokyo/paper/entity/ai/MobGoalHelper.java
@@ -1,7 +1,6 @@
 package com.destroystokyo.paper.entity.ai;
 
 import com.destroystokyo.paper.entity.RangedEntity;
-import com.destroystokyo.paper.util.set.OptimizedSmallEnumSet;
 import com.google.common.collect.BiMap;
 import com.google.common.collect.HashBiMap;
 import io.papermc.paper.util.ObfHelper;
@@ -298,20 +297,14 @@ public class MobGoalHelper {
     }
 
     public static GoalType vanillaToPaper(Goal.Flag type) {
-        switch (type) {
-            case MOVE:
-                return GoalType.MOVE;
-            case LOOK:
-                return GoalType.LOOK;
-            case JUMP:
-                return GoalType.JUMP;
-            case UNKNOWN_BEHAVIOR:
-                return GoalType.UNKNOWN_BEHAVIOR;
-            case TARGET:
-                return GoalType.TARGET;
-            default:
-                throw new IllegalArgumentException("Unknown vanilla mob goal type " + type.name());
-        }
+        return switch (type) {
+            case MOVE -> GoalType.MOVE;
+            case LOOK -> GoalType.LOOK;
+            case JUMP -> GoalType.JUMP;
+            case UNKNOWN_BEHAVIOR -> GoalType.UNKNOWN_BEHAVIOR;
+            case TARGET -> GoalType.TARGET;
+            default -> throw new IllegalArgumentException("Unknown vanilla mob goal type " + type.name());
+        };
     }
 
     public static EnumSet<Goal.Flag> paperToVanilla(EnumSet<GoalType> types) {
@@ -323,20 +316,14 @@ public class MobGoalHelper {
     }
 
     public static Goal.Flag paperToVanilla(GoalType type) {
-        switch (type) {
-            case MOVE:
-                return Goal.Flag.MOVE;
-            case LOOK:
-                return Goal.Flag.LOOK;
-            case JUMP:
-                return Goal.Flag.JUMP;
-            case UNKNOWN_BEHAVIOR:
-                return Goal.Flag.UNKNOWN_BEHAVIOR;
-            case TARGET:
-                return Goal.Flag.TARGET;
-            default:
-                throw new IllegalArgumentException("Unknown paper mob goal type " + type.name());
-        }
+        return switch (type) {
+            case MOVE -> Goal.Flag.MOVE;
+            case LOOK -> Goal.Flag.LOOK;
+            case JUMP -> Goal.Flag.JUMP;
+            case UNKNOWN_BEHAVIOR -> Goal.Flag.UNKNOWN_BEHAVIOR;
+            case TARGET -> Goal.Flag.TARGET;
+            default -> throw new IllegalArgumentException("Unknown paper mob goal type " + type.name());
+        };
     }
 
     public static <T extends Mob> GoalKey<T> getKey(Class<? extends Goal> goalClass) {
diff --git a/src/main/java/com/destroystokyo/paper/io/SyncLoadFinder.java b/src/main/java/com/destroystokyo/paper/io/SyncLoadFinder.java
index 9f24003fffee14592e5ef22e75ec9826428438e6..7bc438f6239210ab83303afeaf1d3c1ecdf3e198 100644
--- a/src/main/java/com/destroystokyo/paper/io/SyncLoadFinder.java
+++ b/src/main/java/com/destroystokyo/paper/io/SyncLoadFinder.java
@@ -133,9 +133,9 @@ public class SyncLoadFinder {
         public static int hash(final StackTraceElement[] stacktrace) {
             int hash = 0;
 
-            for (int i = 0; i < stacktrace.length; ++i) {
+            for (StackTraceElement stackTraceElement : stacktrace) {
                 hash *= 31;
-                hash += stacktrace[i].hashCode();
+                hash += stackTraceElement.hashCode();
             }
 
             return hash;
diff --git a/src/main/java/com/destroystokyo/paper/util/maplist/EntityList.java b/src/main/java/com/destroystokyo/paper/util/maplist/EntityList.java
index 0133ea6feb1ab88f021f66855669f58367e7420b..2e8e79c59348041acfca67d2629b06f35ac3b4bc 100644
--- a/src/main/java/com/destroystokyo/paper/util/maplist/EntityList.java
+++ b/src/main/java/com/destroystokyo/paper/util/maplist/EntityList.java
@@ -2,6 +2,8 @@ package com.destroystokyo.paper.util.maplist;
 
 import it.unimi.dsi.fastutil.ints.Int2IntOpenHashMap;
 import net.minecraft.world.entity.Entity;
+import org.leavesmc.leaves.util.ArrayConstants;
+
 import java.util.Arrays;
 import java.util.Iterator;
 import java.util.NoSuchElementException;
@@ -17,9 +19,7 @@ public final class EntityList implements Iterable<Entity> {
         this.entityToIndex.defaultReturnValue(Integer.MIN_VALUE);
     }
 
-    protected static final Entity[] EMPTY_LIST = new Entity[0];
-
-    protected Entity[] entities = EMPTY_LIST;
+    protected Entity[] entities = ArrayConstants.emptyEntityArray; // Leaves - reduce array allocations
     protected int count;
 
     public int size() {
diff --git a/src/main/java/com/destroystokyo/paper/util/maplist/IBlockDataList.java b/src/main/java/com/destroystokyo/paper/util/maplist/IBlockDataList.java
index 277cfd9d1e8fff5d9b5e534b75c3c5162d58b0b7..7b870ea004d338b2bb9423f9d8c5759801315950 100644
--- a/src/main/java/com/destroystokyo/paper/util/maplist/IBlockDataList.java
+++ b/src/main/java/com/destroystokyo/paper/util/maplist/IBlockDataList.java
@@ -6,6 +6,7 @@ import java.util.Arrays;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.chunk.GlobalPalette;
+import org.leavesmc.leaves.util.ArrayConstants;
 
 /**
  * @author Spottedleaf
@@ -20,9 +21,7 @@ public final class IBlockDataList {
         this.map.defaultReturnValue(Long.MAX_VALUE);
     }
 
-    private static final long[] EMPTY_LIST = new long[0];
-
-    private long[] byIndex = EMPTY_LIST;
+    private long[] byIndex = ArrayConstants.emptyLongArray; // Leaves - reduce array allocations
     private int size;
 
     public static int getLocationKey(final int x, final int y, final int z) {
diff --git a/src/main/java/io/papermc/paper/command/subcommands/VersionCommand.java b/src/main/java/io/papermc/paper/command/subcommands/VersionCommand.java
index ae60bd96b5284d54676d8e7e4dd5d170b526ec1e..0c474b1eb4dbef547890b7db5fcf9c13c86092a2 100644
--- a/src/main/java/io/papermc/paper/command/subcommands/VersionCommand.java
+++ b/src/main/java/io/papermc/paper/command/subcommands/VersionCommand.java
@@ -7,6 +7,7 @@ import org.bukkit.command.CommandSender;
 import org.checkerframework.checker.nullness.qual.NonNull;
 import org.checkerframework.checker.nullness.qual.Nullable;
 import org.checkerframework.framework.qual.DefaultQualifier;
+import org.leavesmc.leaves.util.ArrayConstants;
 
 @DefaultQualifier(NonNull.class)
 public final class VersionCommand implements PaperSubcommand {
@@ -14,7 +15,7 @@ public final class VersionCommand implements PaperSubcommand {
     public boolean execute(final CommandSender sender, final String subCommand, final String[] args) {
         final @Nullable Command ver = MinecraftServer.getServer().server.getCommandMap().getCommand("version");
         if (ver != null) {
-            ver.execute(sender, "paper", new String[0]);
+            ver.execute(sender, "paper", ArrayConstants.emptyStringArray); // Leaves - reduce array allocations
         }
         return true;
     }
diff --git a/src/main/java/io/papermc/paper/world/ChunkEntitySlices.java b/src/main/java/io/papermc/paper/world/ChunkEntitySlices.java
index c78cbec447032de9fe69748591bef6be300160ed..195a83a80db3e9bd3d1dcb8737c3a6b92a635698 100644
--- a/src/main/java/io/papermc/paper/world/ChunkEntitySlices.java
+++ b/src/main/java/io/papermc/paper/world/ChunkEntitySlices.java
@@ -2,11 +2,9 @@ package io.papermc.paper.world;
 
 import com.destroystokyo.paper.util.maplist.EntityList;
 import io.papermc.paper.chunk.system.entity.EntityLookup;
-import io.papermc.paper.util.TickThread;
 import it.unimi.dsi.fastutil.objects.Reference2ObjectMap;
 import it.unimi.dsi.fastutil.objects.Reference2ObjectOpenHashMap;
 import net.minecraft.nbt.CompoundTag;
-import net.minecraft.server.level.ChunkHolder;
 import net.minecraft.server.level.FullChunkStatus;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.util.Mth;
@@ -25,6 +23,7 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.function.Predicate;
 import org.bukkit.event.entity.EntityRemoveEvent;
+import org.leavesmc.leaves.util.ArrayConstants;
 
 public final class ChunkEntitySlices {
 
@@ -83,7 +82,7 @@ public final class ChunkEntitySlices {
             }
         }
 
-        return ret.toArray(new org.bukkit.entity.Entity[0]);
+        return ret.toArray(ArrayConstants.emptyBukkitEntityArray); // Leaves - reduce array allocations
     }
 
     public CompoundTag save() {
@@ -304,7 +303,7 @@ public final class ChunkEntitySlices {
 
     protected static final class BasicEntityList<E extends Entity> {
 
-        protected static final Entity[] EMPTY = new Entity[0];
+        // protected static final Entity[] EMPTY = new Entity[0]; // Leaves - reduce array allocations
         protected static final int DEFAULT_CAPACITY = 4;
 
         protected E[] storage;
@@ -315,7 +314,7 @@ public final class ChunkEntitySlices {
         }
 
         public BasicEntityList(final int cap) {
-            this.storage = (E[])(cap <= 0 ? EMPTY : new Entity[cap]);
+            this.storage = (E[])(cap <= 0 ? ArrayConstants.emptyEntityArray : new Entity[cap]); // Leaves - reduce array allocations
         }
 
         public boolean isEmpty() {
@@ -327,7 +326,7 @@ public final class ChunkEntitySlices {
         }
 
         private void resize() {
-            if (this.storage == EMPTY) {
+            if (this.storage == ArrayConstants.emptyEntityArray) { // Leaves - reduce array allocations
                 this.storage = (E[])new Entity[DEFAULT_CAPACITY];
             } else {
                 this.storage = Arrays.copyOf(this.storage, this.storage.length * 2);
diff --git a/src/main/java/io/papermc/paper/world/ThreadedWorldUpgrader.java b/src/main/java/io/papermc/paper/world/ThreadedWorldUpgrader.java
index 9017907c0ec67a37a506f09b7e4499cef7885279..c7e25160a3b80a4b82418898b3c59beda27caa26 100644
--- a/src/main/java/io/papermc/paper/world/ThreadedWorldUpgrader.java
+++ b/src/main/java/io/papermc/paper/world/ThreadedWorldUpgrader.java
@@ -7,13 +7,10 @@ import net.minecraft.nbt.CompoundTag;
 import net.minecraft.resources.ResourceKey;
 import net.minecraft.util.worldupdate.WorldUpgrader;
 import net.minecraft.world.level.ChunkPos;
-import net.minecraft.world.level.Level;
 import net.minecraft.world.level.chunk.ChunkGenerator;
 import net.minecraft.world.level.chunk.storage.ChunkStorage;
 import net.minecraft.world.level.chunk.storage.RegionFileStorage;
-import net.minecraft.world.level.dimension.DimensionType;
 import net.minecraft.world.level.dimension.LevelStem;
-import net.minecraft.world.level.levelgen.WorldGenSettings;
 import net.minecraft.world.level.storage.DimensionDataStorage;
 import net.minecraft.world.level.storage.LevelStorageSource;
 import org.apache.logging.log4j.LogManager;
diff --git a/src/main/java/net/minecraft/nbt/ByteArrayTag.java b/src/main/java/net/minecraft/nbt/ByteArrayTag.java
index 06648f9751fd8a322d0809ffebf6a544596ee1a4..d6761bdb37619b91f147ff7a9197b730b90bd6cb 100644
--- a/src/main/java/net/minecraft/nbt/ByteArrayTag.java
+++ b/src/main/java/net/minecraft/nbt/ByteArrayTag.java
@@ -7,6 +7,7 @@ import java.io.IOException;
 import java.util.Arrays;
 import java.util.List;
 import org.apache.commons.lang3.ArrayUtils;
+import org.leavesmc.leaves.util.ArrayConstants;
 
 public class ByteArrayTag extends CollectionTag<ByteTag> {
 
@@ -175,7 +176,7 @@ public class ByteArrayTag extends CollectionTag<ByteTag> {
     }
 
     public void clear() {
-        this.data = new byte[0];
+        this.data = ArrayConstants.emptyByteArray; // Leaves - reduce array allocations
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/nbt/CompoundTag.java b/src/main/java/net/minecraft/nbt/CompoundTag.java
index 23916b011ed0645ab284fb080c9555921290d875..47227de03b38ffb6b63d3ccff2984e04f7e20936 100644
--- a/src/main/java/net/minecraft/nbt/CompoundTag.java
+++ b/src/main/java/net/minecraft/nbt/CompoundTag.java
@@ -1,6 +1,5 @@
 package net.minecraft.nbt;
 
-import com.google.common.collect.Maps;
 import com.mojang.serialization.Codec;
 import com.mojang.serialization.DataResult;
 import com.mojang.serialization.Dynamic;
@@ -18,6 +17,7 @@ import javax.annotation.Nullable;
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
 import net.minecraft.ReportedException;
+import org.leavesmc.leaves.util.ArrayConstants;
 
 public class CompoundTag implements Tag {
     public static final Codec<CompoundTag> CODEC = Codec.PASSTHROUGH
@@ -409,7 +409,7 @@ public class CompoundTag implements Tag {
             throw new ReportedException(this.createReport(key, ByteArrayTag.TYPE, var3));
         }
 
-        return new byte[0];
+        return ArrayConstants.emptyByteArray; // Leaves - reduce array allocations
     }
 
     public int[] getIntArray(String key) {
@@ -421,7 +421,7 @@ public class CompoundTag implements Tag {
             throw new ReportedException(this.createReport(key, IntArrayTag.TYPE, var3));
         }
 
-        return new int[0];
+        return ArrayConstants.emptyIntArray; // Leaves - reduce array allocations
     }
 
     public long[] getLongArray(String key) {
@@ -433,7 +433,7 @@ public class CompoundTag implements Tag {
             throw new ReportedException(this.createReport(key, LongArrayTag.TYPE, var3));
         }
 
-        return new long[0];
+        return ArrayConstants.emptyLongArray; // Leaves - reduce array allocations
     }
 
     public CompoundTag getCompound(String key) {
diff --git a/src/main/java/net/minecraft/nbt/IntArrayTag.java b/src/main/java/net/minecraft/nbt/IntArrayTag.java
index ff13d67151c50ea11a45117e524c7524e2b1a202..409ce69a28d6b6f7aaace37eef7572fb184df69e 100644
--- a/src/main/java/net/minecraft/nbt/IntArrayTag.java
+++ b/src/main/java/net/minecraft/nbt/IntArrayTag.java
@@ -7,6 +7,7 @@ import java.io.IOException;
 import java.util.Arrays;
 import java.util.List;
 import org.apache.commons.lang3.ArrayUtils;
+import org.leavesmc.leaves.util.ArrayConstants;
 
 public class IntArrayTag extends CollectionTag<IntTag> {
 
@@ -78,11 +79,8 @@ public class IntArrayTag extends CollectionTag<IntTag> {
     public void write(DataOutput output) throws IOException {
         output.writeInt(this.data.length);
         int[] aint = this.data;
-        int i = aint.length;
-
-        for (int j = 0; j < i; ++j) {
-            int k = aint[j];
 
+        for (int k : aint) {
             output.writeInt(k);
         }
 
@@ -186,7 +184,7 @@ public class IntArrayTag extends CollectionTag<IntTag> {
     }
 
     public void clear() {
-        this.data = new int[0];
+        this.data = ArrayConstants.emptyIntArray; // Leaves - reduce array allocations
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/nbt/ListTag.java b/src/main/java/net/minecraft/nbt/ListTag.java
index 24ad8d22b5180cd7d7f793e3074e438f9192448f..36d222395878f2e9821becb835065c002ffaeb55 100644
--- a/src/main/java/net/minecraft/nbt/ListTag.java
+++ b/src/main/java/net/minecraft/nbt/ListTag.java
@@ -164,11 +164,7 @@ public class ListTag extends CollectionTag<Tag> {
 
         output.writeByte(this.type);
         output.writeInt(this.list.size());
-        Iterator iterator = this.list.iterator();
-
-        while (iterator.hasNext()) {
-            Tag nbtbase = (Tag) iterator.next();
-
+        for (Tag nbtbase : this.list) {
             nbtbase.write(output);
         }
 
@@ -181,8 +177,8 @@ public class ListTag extends CollectionTag<Tag> {
 
         Tag nbtbase;
 
-        for (Iterator iterator = this.list.iterator(); iterator.hasNext(); i += nbtbase.sizeInBytes()) {
-            nbtbase = (Tag) iterator.next();
+        for (Iterator<Tag> iterator = this.list.iterator(); iterator.hasNext(); i += nbtbase.sizeInBytes()) {
+            nbtbase = iterator.next();
         }
 
         return i;
diff --git a/src/main/java/net/minecraft/network/Connection.java b/src/main/java/net/minecraft/network/Connection.java
index 0e8e57c291539e50f61e8178fc355fa698248967..cc867a680e9380e21d43ebaadef7421a35aa5f83 100644
--- a/src/main/java/net/minecraft/network/Connection.java
+++ b/src/main/java/net/minecraft/network/Connection.java
@@ -1,7 +1,6 @@
 package net.minecraft.network;
 
 import com.google.common.base.Suppliers;
-import com.google.common.collect.Queues;
 import com.google.common.util.concurrent.ThreadFactoryBuilder;
 import com.mojang.logging.LogUtils;
 import io.netty.bootstrap.Bootstrap;
@@ -23,7 +22,6 @@ import io.netty.channel.epoll.EpollSocketChannel;
 import io.netty.channel.local.LocalChannel;
 import io.netty.channel.local.LocalServerChannel;
 import io.netty.channel.nio.NioEventLoopGroup;
-import io.netty.channel.socket.SocketChannel;
 import io.netty.channel.socket.nio.NioSocketChannel;
 import io.netty.handler.flow.FlowControlHandler;
 import io.netty.handler.timeout.ReadTimeoutHandler;
@@ -37,7 +35,6 @@ import java.util.concurrent.RejectedExecutionException;
 import java.util.function.Consumer;
 import java.util.function.Supplier;
 import javax.annotation.Nullable;
-import javax.crypto.Cipher;
 import net.minecraft.SharedConstants;
 import net.minecraft.Util;
 import net.minecraft.network.chat.Component;
@@ -535,20 +532,11 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>> {
     }
 
     private static AttributeKey<ConnectionProtocol.CodecData<?>> getProtocolKey(PacketFlow side) {
-        AttributeKey attributekey;
-
-        switch (side) {
-            case CLIENTBOUND:
-                attributekey = Connection.ATTRIBUTE_CLIENTBOUND_PROTOCOL;
-                break;
-            case SERVERBOUND:
-                attributekey = Connection.ATTRIBUTE_SERVERBOUND_PROTOCOL;
-                break;
-            default:
-                throw new IncompatibleClassChangeError();
-        }
-
-        return attributekey;
+        return switch (side) {
+            case CLIENTBOUND -> Connection.ATTRIBUTE_CLIENTBOUND_PROTOCOL;
+            case SERVERBOUND -> Connection.ATTRIBUTE_SERVERBOUND_PROTOCOL;
+            default -> throw new IncompatibleClassChangeError();
+        };
     }
 
     // Paper start - Optimize network: Rewrite this to be safer if ran off main thread
diff --git a/src/main/java/net/minecraft/server/level/ServerEntity.java b/src/main/java/net/minecraft/server/level/ServerEntity.java
index 8364e1f0e4f4a1fbcabeaffbf102db1ed2867aac..e3e134cfa4ae0c496557b1750e0bf272bbb62a6a 100644
--- a/src/main/java/net/minecraft/server/level/ServerEntity.java
+++ b/src/main/java/net/minecraft/server/level/ServerEntity.java
@@ -336,7 +336,7 @@ public class ServerEntity {
 
         if (this.entity instanceof LivingEntity) {
             List<Pair<EquipmentSlot, ItemStack>> list = Lists.newArrayList();
-            EquipmentSlot[] aenumitemslot = EquipmentSlot.values();
+            EquipmentSlot[] aenumitemslot = EquipmentSlot.VALUES; // Leaves - reduce array allocations
             for (EquipmentSlot enumitemslot : aenumitemslot) {
                 ItemStack itemstack = ((LivingEntity) this.entity).getItemBySlot(enumitemslot);
 
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index bdfeecd1084e18d21274e5c92da02f1406d7803e..778061145b75bd1143e98947b6a16366f1ba7756 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -15,7 +15,6 @@ import it.unimi.dsi.fastutil.objects.Object2IntMap.Entry;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
 import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 import it.unimi.dsi.fastutil.objects.ObjectIterator;
-import it.unimi.dsi.fastutil.objects.ObjectLinkedOpenHashSet;
 import it.unimi.dsi.fastutil.objects.ObjectOpenHashSet;
 import java.io.BufferedWriter;
 import java.io.IOException;
@@ -135,12 +134,9 @@ import net.minecraft.world.level.chunk.storage.EntityStorage;
 import net.minecraft.world.level.dimension.BuiltinDimensionTypes;
 import net.minecraft.world.level.dimension.LevelStem;
 import net.minecraft.world.level.dimension.end.EndDragonFight;
-import net.minecraft.world.level.entity.EntityPersistentStorage;
-import net.minecraft.world.level.entity.EntityTickList;
 import net.minecraft.world.level.entity.EntityTypeTest;
 import net.minecraft.world.level.entity.LevelCallback;
 import net.minecraft.world.level.entity.LevelEntityGetter;
-import net.minecraft.world.level.entity.PersistentEntitySectionManager;
 import net.minecraft.world.level.gameevent.DynamicGameEventListener;
 import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.level.gameevent.GameEventDispatcher;
@@ -165,18 +161,17 @@ import net.minecraft.world.phys.shapes.BooleanOp;
 import net.minecraft.world.phys.shapes.Shapes;
 import net.minecraft.world.phys.shapes.VoxelShape;
 import net.minecraft.world.ticks.LevelTicks;
+import org.leavesmc.leaves.util.ArrayConstants;
 import org.slf4j.Logger;
 import org.bukkit.Bukkit;
 import org.bukkit.Location;
 import org.bukkit.WeatherType;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.craftbukkit.generator.CustomWorldChunkManager;
-import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.craftbukkit.util.WorldUUID;
 import org.bukkit.event.entity.CreatureSpawnEvent;
 import org.bukkit.event.server.MapInitializeEvent;
 import org.bukkit.event.weather.LightningStrikeEvent;
-import org.bukkit.event.world.GenericGameEvent;
 import org.bukkit.event.world.TimeSkipEvent;
 // CraftBukkit end
 
@@ -350,8 +345,8 @@ public class ServerLevel extends Level implements WorldGenLevel {
                 try {
                     onLoad.accept(java.util.Collections.unmodifiableList(ret));
                 } finally {
-                    for (int i = 0, len = ret.size(); i < len; ++i) {
-                        ChunkPos chunkPos = ret.get(i).getPos();
+                    for (ChunkAccess chunkAccess : ret) {
+                        ChunkPos chunkPos = chunkAccess.getPos();
 
                         chunkProvider.addTicketAtLevel(TicketType.UNKNOWN, chunkPos, ticketLevel, chunkPos);
                         chunkProvider.removeTicketAtLevel(TicketType.FUTURE_AWAIT, chunkPos, ticketLevel, holderIdentifier);
@@ -1084,14 +1079,14 @@ public class ServerLevel extends Level implements WorldGenLevel {
 
     public void tickCustomSpawners(boolean spawnMonsters, boolean spawnAnimals) {
         final ca.spottedleaf.leafprofiler.RegionizedProfiler.Handle profiler = io.papermc.paper.threadedregions.TickRegionScheduler.getProfiler(); // Folia - profiler
-        Iterator iterator = this.customSpawners.iterator();
 
-        while (iterator.hasNext()) {
-            CustomSpawner mobspawner = (CustomSpawner) iterator.next();
-
-            final int customSpawnerTimer = profiler.getOrCreateTimerAndStart(() -> "Misc Spawner: ".concat(io.papermc.paper.util.ObfHelper.INSTANCE.deobfClassName(mobspawner.getClass().getName()))); try { // Folia - profiler
-            mobspawner.tick(this, spawnMonsters, spawnAnimals);
-            } finally { profiler.stopTimer(customSpawnerTimer); } // Folia - profiler
+        for (CustomSpawner mobspawner : this.customSpawners) {
+            final int customSpawnerTimer = profiler.getOrCreateTimerAndStart(() -> "Misc Spawner: ".concat(io.papermc.paper.util.ObfHelper.INSTANCE.deobfClassName(mobspawner.getClass().getName())));
+            try { // Folia - profiler
+                mobspawner.tick(this, spawnMonsters, spawnAnimals);
+            } finally {
+                profiler.stopTimer(customSpawnerTimer);
+            } // Folia - profiler
         }
 
     }
@@ -1197,7 +1192,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
                     BlockPos blockposition2 = blockposition.set(j + randomX, randomY, k + randomZ);
                     BlockState iblockdata = com.destroystokyo.paper.util.maplist.IBlockDataList.getBlockDataFromRaw(raw);
 
-                    iblockdata.randomTick(this, blockposition2, randomTickRandom); // Folia - region threading
+                    iblockdata.randomTick(this, blockposition2.immutable(), randomTickRandom); // Folia - region threading
                 }
                 // We drop the fluid tick since LAVA is ALREADY TICKED by the above method (See LiquidBlock).
                 // TODO CHECK ON UPDATE (ping the Canadian)
@@ -1321,11 +1316,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
                     ichatmutablecomponent = Component.translatable("sleep.players_sleeping", this.sleepStatus.amountSleeping(), this.sleepStatus.sleepersNeeded(i));
                 }
 
-                Iterator iterator = this.players.iterator();
-
-                while (iterator.hasNext()) {
-                    ServerPlayer entityplayer = (ServerPlayer) iterator.next();
-
+                for (ServerPlayer entityplayer : this.players) {
                     entityplayer.displayClientMessage(ichatmutablecomponent, true);
                 }
 
@@ -1513,9 +1504,8 @@ public class ServerLevel extends Level implements WorldGenLevel {
 
     public static List<Entity> getCurrentlyTickingEntities() {
         Entity ticking = currentlyTickingEntity.get();
-        List<Entity> ret = java.util.Arrays.asList(ticking == null ? new Entity[0] : new Entity[] { ticking });
 
-        return ret;
+        return java.util.Arrays.asList(ticking == null ? ArrayConstants.emptyEntityArray : new Entity[] { ticking });
     }
     // Paper end - log detailed entity tick information
 
@@ -1575,13 +1565,10 @@ public class ServerLevel extends Level implements WorldGenLevel {
         this.getProfiler().pop();
         } finally { timer.stopTiming(); profiler.stopTimer(timerId); } // Paper - timings // Folia - timer
         } finally { if (levelChunk != null) levelChunk.getChunkHot().stopTickingAndCount(); } // KioCG
-        Iterator iterator = entity.getPassengers().iterator();
 
-        while (iterator.hasNext()) {
-            Entity entity1 = (Entity) iterator.next();
-
-            this.tickPassenger(entity, entity1);
-        }
+            for (Entity entity1 : entity.getPassengers()) {
+                this.tickPassenger(entity, entity1);
+            }
         // } finally { timer.stopTiming(); } // Paper - timings - move up
         // Paper start - log detailed entity tick information
         } finally {
@@ -1636,14 +1623,10 @@ public class ServerLevel extends Level implements WorldGenLevel {
                 }
                 // Paper end - EAR 2
                 gameprofilerfiller.pop();
-                Iterator iterator = passenger.getPassengers().iterator();
-
-                while (iterator.hasNext()) {
-                    Entity entity2 = (Entity) iterator.next();
 
+                for (Entity entity2 : passenger.getPassengers()) {
                     this.tickPassenger(passenger, entity2);
                 }
-
             } finally { timer.stopTiming(); profiler.stopTimer(timerId); }// Paper - EAR2 timings // Folia - timer
             } finally { if (levelChunk != null) levelChunk.getChunkHot().stopTickingAndCount(); } // KioCG
             }
@@ -1770,11 +1753,8 @@ public class ServerLevel extends Level implements WorldGenLevel {
 
     public List<ServerPlayer> getPlayers(Predicate<? super ServerPlayer> predicate, int limit) {
         List<ServerPlayer> list = Lists.newArrayList();
-        Iterator iterator = this.players.iterator();
-
-        while (iterator.hasNext()) {
-            ServerPlayer entityplayer = (ServerPlayer) iterator.next();
 
+        for (ServerPlayer entityplayer : this.players) {
             if (predicate.test(entityplayer)) {
                 list.add(entityplayer);
                 if (list.size() >= limit) {
@@ -2143,11 +2123,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
             explosion.clearToBlow();
         }
 
-        Iterator iterator = this.getLocalPlayers().iterator(); // Folia - region thraeding
-
-        while (iterator.hasNext()) {
-            ServerPlayer entityplayer = (ServerPlayer) iterator.next();
-
+        for (ServerPlayer entityplayer : this.getLocalPlayers()) { // Folia - region thraeding
             if (entityplayer.distanceToSqr(x, y, z) < 4096.0D) {
                 entityplayer.connection.send(new ClientboundExplodePacket(x, y, z, power, explosion.getToBlow(), (Vec3) explosion.getHitPlayers().get(entityplayer), explosion.getBlockInteraction(), explosion.getSmallExplosionParticles(), explosion.getLargeExplosionParticles(), explosion.getExplosionSound()));
             }
@@ -2713,10 +2689,8 @@ public class ServerLevel extends Level implements WorldGenLevel {
 
     private static void dumpEntities(Writer writer, Iterable<Entity> entities) throws IOException {
         CsvOutput csvwriter = CsvOutput.builder().addColumn("x").addColumn("y").addColumn("z").addColumn("uuid").addColumn("type").addColumn("alive").addColumn("display_name").addColumn("custom_name").build(writer);
-        Iterator iterator = entities.iterator();
 
-        while (iterator.hasNext()) {
-            Entity entity = (Entity) iterator.next();
+        for (Entity entity : entities) {
             Component ichatbasecomponent = entity.getCustomName();
             Component ichatbasecomponent1 = entity.getDisplayName();
 
@@ -2798,10 +2772,8 @@ public class ServerLevel extends Level implements WorldGenLevel {
     private static <T> String getTypeCount(Iterable<T> items, Function<T, String> classifier) {
         try {
             Object2IntOpenHashMap<String> object2intopenhashmap = new Object2IntOpenHashMap();
-            Iterator<T> iterator = items.iterator(); // CraftBukkit - decompile error
 
-            while (iterator.hasNext()) {
-                T t0 = iterator.next();
+            for (T t0 : items) { // CraftBukkit - decompile error
                 String s = (String) classifier.apply(t0);
 
                 object2intopenhashmap.addTo(s, 1);
@@ -3000,16 +2972,12 @@ public class ServerLevel extends Level implements WorldGenLevel {
                 ServerLevel.this.getCurrentWorldData().addNavigatingMob(entityinsentient); // Folia - region threading
             }
 
-            if (entity instanceof EnderDragon) {
-                EnderDragon entityenderdragon = (EnderDragon) entity;
+            if (entity instanceof EnderDragon entityenderdragon) {
                 EnderDragonPart[] aentitycomplexpart = entityenderdragon.getSubEntities();
-                int i = aentitycomplexpart.length;
-
-                for (int j = 0; j < i; ++j) {
-                    EnderDragonPart entitycomplexpart = aentitycomplexpart[j];
 
+                for (EnderDragonPart entitycomplexpart : aentitycomplexpart) {
                     synchronized (ServerLevel.this.dragonParts) { // Folia - region threading
-                    ServerLevel.this.dragonParts.put(entitycomplexpart.getId(), entitycomplexpart);
+                        ServerLevel.this.dragonParts.put(entitycomplexpart.getId(), entitycomplexpart);
                     } // Folia - region threading
                 }
             }
@@ -3097,16 +3065,11 @@ public class ServerLevel extends Level implements WorldGenLevel {
                 ServerLevel.this.getCurrentWorldData().removeNavigatingMob(entityinsentient); // Folia - region threading
             }
 
-            if (entity instanceof EnderDragon) {
-                EnderDragon entityenderdragon = (EnderDragon) entity;
+            if (entity instanceof EnderDragon entityenderdragon) {
                 EnderDragonPart[] aentitycomplexpart = entityenderdragon.getSubEntities();
-                int i = aentitycomplexpart.length;
-
-                for (int j = 0; j < i; ++j) {
-                    EnderDragonPart entitycomplexpart = aentitycomplexpart[j];
-
+                for (EnderDragonPart entitycomplexpart : aentitycomplexpart) {
                     synchronized (ServerLevel.this.dragonParts) { // Folia - region threading
-                    ServerLevel.this.dragonParts.remove(entitycomplexpart.getId());
+                        ServerLevel.this.dragonParts.remove(entitycomplexpart.getId());
                     } // Folia - region threading
                 }
             }
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index fbe2372d871f8f2b53b04f7bddf3a5652f2eb394..0db57af6f709ca010fcf4c27184010b1c871ec3e 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -9,7 +9,6 @@ import com.mojang.logging.LogUtils;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap.Entry;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMaps;
 import it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap;
-import it.unimi.dsi.fastutil.objects.ObjectIterator;
 import java.net.SocketAddress;
 import java.util.Collections;
 import java.util.EnumSet;
@@ -44,7 +43,6 @@ import net.minecraft.nbt.ListTag;
 import net.minecraft.nbt.StringTag;
 import net.minecraft.network.Connection;
 import net.minecraft.network.TickablePacketListener;
-import net.minecraft.network.chat.ChatDecorator;
 import net.minecraft.network.chat.ChatType;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.LastSeenMessages;
@@ -60,7 +58,6 @@ import net.minecraft.network.chat.SignedMessageChain;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.PacketUtils;
 import net.minecraft.network.protocol.common.ServerboundClientInformationPacket;
-import net.minecraft.network.protocol.game.ClientboundAddEntityPacket;
 import net.minecraft.network.protocol.game.ClientboundBlockChangedAckPacket;
 import net.minecraft.network.protocol.game.ClientboundBlockUpdatePacket;
 import net.minecraft.network.protocol.game.ClientboundCommandSuggestionsPacket;
@@ -177,7 +174,6 @@ import net.minecraft.world.level.block.entity.CrafterBlockEntity;
 import net.minecraft.world.level.block.entity.JigsawBlockEntity;
 import net.minecraft.world.level.block.entity.SignBlockEntity;
 import net.minecraft.world.level.block.entity.StructureBlockEntity;
-import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.BlockHitResult;
@@ -186,6 +182,7 @@ import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.phys.shapes.BooleanOp;
 import net.minecraft.world.phys.shapes.Shapes;
 import net.minecraft.world.phys.shapes.VoxelShape;
+import org.leavesmc.leaves.util.ArrayConstants;
 import org.slf4j.Logger;
 
 // CraftBukkit start
@@ -208,7 +205,6 @@ import org.bukkit.craftbukkit.entity.CraftPlayer;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.craftbukkit.inventory.CraftItemType;
-import org.bukkit.craftbukkit.util.CraftChatMessage;
 import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.craftbukkit.util.LazyPlayerSet;
 import org.bukkit.craftbukkit.util.Waitable;
@@ -223,8 +219,6 @@ import org.bukkit.event.inventory.InventoryCreativeEvent;
 import org.bukkit.event.inventory.InventoryType.SlotType;
 import org.bukkit.event.inventory.SmithItemEvent;
 import org.bukkit.event.player.AsyncPlayerChatEvent;
-import org.bukkit.event.player.PlayerAnimationEvent;
-import org.bukkit.event.player.PlayerAnimationType;
 import org.bukkit.event.player.PlayerChatEvent;
 import org.bukkit.event.player.PlayerCommandPreprocessEvent;
 import org.bukkit.event.player.PlayerInteractAtEntityEvent;
@@ -823,7 +817,7 @@ public class ServerGamePacketListenerImpl extends ServerCommonPacketListenerImpl
         // Paper start
         final int index;
         if (packet.getCommand().length() > 64 && ((index = packet.getCommand().indexOf(' ')) == -1 || index >= 64)) {
-            this.disconnect(Component.translatable("disconnect.spam"), org.bukkit.event.player.PlayerKickEvent.Cause.SPAM); // Folia - region threading
+            this.disconnect(Component.translatable("disconnect.spam", ArrayConstants.emptyObjectArray), org.bukkit.event.player.PlayerKickEvent.Cause.SPAM); // Folia - region threading // Leaves - reduce array allocations
             return;
         }
         // Paper end
@@ -1686,15 +1680,13 @@ public class ServerGamePacketListenerImpl extends ServerCommonPacketListenerImpl
             null, null
         );
 
-        for (int i = 0, len = collisionsBB.size(); i < len; ++i) {
-            final AABB box = collisionsBB.get(i);
+        for (final AABB box : collisionsBB) {
             if (!io.papermc.paper.util.CollisionUtil.voxelShapeIntersect(box, oldBox)) {
                 return true;
             }
         }
 
-        for (int i = 0, len = collisionsVoxel.size(); i < len; ++i) {
-            final VoxelShape voxel = collisionsVoxel.get(i);
+        for (final VoxelShape voxel : collisionsVoxel) {
             if (!io.papermc.paper.util.CollisionUtil.voxelShapeIntersectNoEmpty(voxel, oldBox)) {
                 return true;
             }
@@ -1707,7 +1699,7 @@ public class ServerGamePacketListenerImpl extends ServerCommonPacketListenerImpl
         AABB axisalignedbb1 = this.player.getBoundingBox().move(newX - this.player.getX(), newY - this.player.getY(), newZ - this.player.getZ());
         Iterable<VoxelShape> iterable = world.getCollisions(this.player, axisalignedbb1.deflate(9.999999747378752E-6D));
         VoxelShape voxelshape = Shapes.create(box.deflate(9.999999747378752E-6D));
-        Iterator iterator = iterable.iterator();
+        Iterator<VoxelShape> iterator = iterable.iterator();
 
         VoxelShape voxelshape1;
 
@@ -1716,7 +1708,7 @@ public class ServerGamePacketListenerImpl extends ServerCommonPacketListenerImpl
                 return false;
             }
 
-            voxelshape1 = (VoxelShape) iterator.next();
+            voxelshape1 = iterator.next();
         } while (Shapes.joinIsNotEmpty(voxelshape1, voxelshape, BooleanOp.AND));
 
         return true;
@@ -2084,14 +2076,11 @@ public class ServerGamePacketListenerImpl extends ServerCommonPacketListenerImpl
     public void handleTeleportToEntityPacket(ServerboundTeleportToEntityPacket packet) {
         PacketUtils.ensureRunningOnSameThread(packet, this, this.player.serverLevel());
         if (this.player.isSpectator()) {
-            Iterator iterator = this.server.getAllLevels().iterator();
-
-            while (iterator.hasNext()) {
-                ServerLevel worldserver = (ServerLevel) iterator.next();
+            for (ServerLevel worldserver : this.server.getAllLevels()) {
                 Entity entity = packet.getEntity(worldserver);
 
                 if (entity != null) {
-                    io.papermc.paper.threadedregions.TeleportUtils.teleport(this.player, false, entity, null, null, Entity.TELEPORT_FLAG_LOAD_CHUNK, org.bukkit.event.player.PlayerTeleportEvent.TeleportCause.SPECTATE, null); // Folia - region threading
+                    io.papermc.paper.threadedregions.TeleportUtils.teleport(this.player, false, entity, null, null, Entity.TELEPORT_FLAG_LOAD_CHUNK, PlayerTeleportEvent.TeleportCause.SPECTATE, null); // Folia - region threading
                     return;
                 }
             }
@@ -2306,15 +2295,13 @@ public class ServerGamePacketListenerImpl extends ServerCommonPacketListenerImpl
     }
 
     private Map<String, PlayerChatMessage> collectSignedArguments(ServerboundChatCommandPacket packet, SignableCommand<?> arguments, LastSeenMessages lastSeenMessages) throws SignedMessageChain.DecodeException {
-        Map<String, PlayerChatMessage> map = new Object2ObjectOpenHashMap();
-        Iterator iterator = arguments.arguments().iterator();
+        Map<String, PlayerChatMessage> map = new Object2ObjectOpenHashMap<>();
 
-        while (iterator.hasNext()) {
-            SignableCommand.Argument<?> signablecommand_a = (SignableCommand.Argument) iterator.next();
-            MessageSignature messagesignature = packet.argumentSignatures().get(signablecommand_a.name());
-            SignedMessageBody signedmessagebody = new SignedMessageBody(signablecommand_a.value(), packet.timeStamp(), packet.salt(), lastSeenMessages);
+        for (SignableCommand.Argument<?> argument : arguments.arguments()) {
+            MessageSignature messagesignature = packet.argumentSignatures().get(argument.name());
+            SignedMessageBody signedmessagebody = new SignedMessageBody(argument.value(), packet.timeStamp(), packet.salt(), lastSeenMessages);
 
-            map.put(signablecommand_a.name(), this.signedMessageDecoder.unpack(messagesignature, signedmessagebody));
+            map.put(argument.name(), this.signedMessageDecoder.unpack(messagesignature, signedmessagebody));
         }
 
         return map;
@@ -3284,12 +3271,8 @@ public class ServerGamePacketListenerImpl extends ServerCommonPacketListenerImpl
                         }
                     }
                     // CraftBukkit end
-                    ObjectIterator objectiterator = Int2ObjectMaps.fastIterable(packet.getChangedSlots()).iterator();
-
-                    while (objectiterator.hasNext()) {
-                        Entry<ItemStack> entry = (Entry) objectiterator.next();
-
-                        this.player.containerMenu.setRemoteSlotNoCopy(entry.getIntKey(), (ItemStack) entry.getValue());
+                    for (Entry<ItemStack> itemStackEntry : Int2ObjectMaps.fastIterable(packet.getChangedSlots())) {
+                        this.player.containerMenu.setRemoteSlotNoCopy(itemStackEntry.getIntKey(), itemStackEntry.getValue());
                     }
 
                     this.player.containerMenu.setRemoteCarried(packet.getCarriedItem());
diff --git a/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
index 1ff6c82925417932df856bf1e5866519327f018e..531f461bf6e18a796184b0e14b3b9180f3d13dcb 100644
--- a/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
@@ -13,7 +13,6 @@ import java.security.PrivateKey;
 import java.util.Objects;
 import java.util.concurrent.atomic.AtomicInteger;
 import javax.annotation.Nullable;
-import javax.crypto.Cipher;
 import javax.crypto.SecretKey;
 import net.minecraft.CrashReportCategory;
 import net.minecraft.DefaultUncaughtExceptionHandler;
@@ -39,6 +38,7 @@ import net.minecraft.util.CryptException;
 import net.minecraft.util.RandomSource;
 import net.minecraft.world.entity.player.Player;
 import org.apache.commons.lang3.Validate;
+import org.leavesmc.leaves.util.ArrayConstants;
 import org.slf4j.Logger;
 import org.bukkit.craftbukkit.util.Waitable;
 import org.bukkit.event.player.AsyncPlayerPreLoginEvent;
@@ -142,8 +142,8 @@ public class ServerLoginPacketListenerImpl implements ServerLoginPacketListener,
 
     @Override
     public void handleHello(ServerboundHelloPacket packet) {
-        Validate.validState(this.state == ServerLoginPacketListenerImpl.State.HELLO, "Unexpected hello packet", new Object[0]);
-        if (io.papermc.paper.configuration.GlobalConfiguration.get().proxies.isProxyOnlineMode() && io.papermc.paper.configuration.GlobalConfiguration.get().unsupportedSettings.performUsernameValidation && !this.iKnowThisMayNotBeTheBestIdeaButPleaseDisableUsernameValidation && me.earthme.luminol.config.modules.misc.UsernameCheckConfig.enabled) Validate.validState(Player.isValidUsername(packet.name()), "Invalid characters in username", new Object[0]); // Paper - config username validation  //Luminol - Add config for username check
+        Validate.validState(this.state == ServerLoginPacketListenerImpl.State.HELLO, "Unexpected hello packet", ArrayConstants.emptyObjectArray); // Leaves - reduce array allocations
+        if (io.papermc.paper.configuration.GlobalConfiguration.get().proxies.isProxyOnlineMode() && io.papermc.paper.configuration.GlobalConfiguration.get().unsupportedSettings.performUsernameValidation && !this.iKnowThisMayNotBeTheBestIdeaButPleaseDisableUsernameValidation && me.earthme.luminol.config.modules.misc.UsernameCheckConfig.enabled) Validate.validState(Player.isValidUsername(packet.name()), "Invalid characters in username", ArrayConstants.emptyObjectArray); // Paper - config username validation  //Luminol - Add config for username check //Leaves - reduce array allocations
         this.requestedUsername = packet.name();
         GameProfile gameprofile = this.server.getSingleplayerProfile();
 
@@ -227,7 +227,7 @@ public class ServerLoginPacketListenerImpl implements ServerLoginPacketListener,
 
     @Override
     public void handleKey(ServerboundKeyPacket packet) {
-        Validate.validState(this.state == ServerLoginPacketListenerImpl.State.KEY, "Unexpected key packet", new Object[0]);
+        Validate.validState(this.state == ServerLoginPacketListenerImpl.State.KEY, "Unexpected key packet", ArrayConstants.emptyObjectArray); // Leaves - reduce array allocations
 
         final String s;
 
diff --git a/src/main/java/net/minecraft/server/players/StoredUserList.java b/src/main/java/net/minecraft/server/players/StoredUserList.java
index 9756d1750f40bda0578f4c965953a27c384e7db2..0c3ba352f97cd0609eb6623f00197fd10a8f3578 100644
--- a/src/main/java/net/minecraft/server/players/StoredUserList.java
+++ b/src/main/java/net/minecraft/server/players/StoredUserList.java
@@ -1,6 +1,5 @@
 package net.minecraft.server.players;
 
-import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.io.Files;
 import com.google.gson.Gson;
@@ -15,14 +14,13 @@ import java.io.File;
 import java.io.IOException;
 import java.nio.charset.StandardCharsets;
 import java.util.Collection;
-import java.util.Iterator;
-import java.util.List;
 import java.util.Map;
 import java.util.Objects;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
 import net.minecraft.Util;
 import net.minecraft.util.GsonHelper;
+import org.leavesmc.leaves.util.ArrayConstants;
 import org.slf4j.Logger;
 
 public abstract class StoredUserList<K, V extends StoredUserEntry<K>> {
@@ -76,7 +74,7 @@ public abstract class StoredUserList<K, V extends StoredUserEntry<K>> {
     }
 
     public String[] getUserList() {
-        return (String[]) this.map.keySet().toArray(new String[0]);
+        return (String[]) this.map.keySet().toArray(ArrayConstants.emptyStringArray); // Leaves - reduce array allocations
     }
 
     public boolean isEmpty() {
@@ -153,10 +151,7 @@ public abstract class StoredUserList<K, V extends StoredUserEntry<K>> {
                         break label54;
                     }
 
-                    Iterator iterator = jsonarray.iterator();
-
-                    while (iterator.hasNext()) {
-                        JsonElement jsonelement = (JsonElement) iterator.next();
+                    for (JsonElement jsonelement : jsonarray) {
                         JsonObject jsonobject = GsonHelper.convertToJsonObject(jsonelement, "entry");
                         StoredUserEntry<K> jsonlistentry = this.createEntry(jsonobject);
 
diff --git a/src/main/java/net/minecraft/util/ZeroBitStorage.java b/src/main/java/net/minecraft/util/ZeroBitStorage.java
index 1cd79ab7635d4a5e55538c1130f487245f45b4b6..d3ef704fa264a207fd6ad8cdef2d26a56baadeae 100644
--- a/src/main/java/net/minecraft/util/ZeroBitStorage.java
+++ b/src/main/java/net/minecraft/util/ZeroBitStorage.java
@@ -2,10 +2,10 @@ package net.minecraft.util;
 
 import java.util.Arrays;
 import java.util.function.IntConsumer;
-import org.apache.commons.lang3.Validate;
+import org.leavesmc.leaves.util.ArrayConstants;
 
 public class ZeroBitStorage implements BitStorage {
-    public static final long[] RAW = new long[0];
+    public static final long[] RAW = ArrayConstants.emptyLongArray; // Leaves - reduce array allocations
     private final int size;
 
     public ZeroBitStorage(int size) {
diff --git a/src/main/java/net/minecraft/world/entity/EquipmentSlot.java b/src/main/java/net/minecraft/world/entity/EquipmentSlot.java
index 8b4dd6ff53d2d61c71f04c37389ac645766305c4..0ff2e701439128abd8ac1bdb3ad9ccf7ff81528d 100644
--- a/src/main/java/net/minecraft/world/entity/EquipmentSlot.java
+++ b/src/main/java/net/minecraft/world/entity/EquipmentSlot.java
@@ -15,6 +15,7 @@ public enum EquipmentSlot implements StringRepresentable {
     private final int index;
     private final int filterFlag;
     private final String name;
+    public static final EquipmentSlot[] VALUES = EquipmentSlot.values(); // Leaves - reduce array allocations
 
     private EquipmentSlot(EquipmentSlot.Type type, int entityId, int armorStandId, String name) {
         this.type = type;
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index 16d060c1ec00b1453d3ba27181a1d7b341244da9..4bf7139ea2e57268af938001b6bdda3a40140784 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -931,13 +931,13 @@ public abstract class LivingEntity extends Entity implements Attackable {
     // CraftBukkit end
 
     protected void tickEffects() {
-        Iterator iterator = this.activeEffects.keySet().iterator();
+        Iterator<MobEffect> iterator = this.activeEffects.keySet().iterator();
 
         this.isTickingEffects = true; // CraftBukkit
         try {
             while (iterator.hasNext()) {
-                MobEffect mobeffectlist = (MobEffect) iterator.next();
-                MobEffectInstance mobeffect = (MobEffectInstance) this.activeEffects.get(mobeffectlist);
+                MobEffect mobeffectlist = iterator.next();
+                MobEffectInstance mobeffect = this.activeEffects.get(mobeffectlist);
 
                 if (!mobeffect.tick(this, () -> {
                     this.onEffectUpdated(mobeffect, true, (Entity) null);
@@ -1481,9 +1481,7 @@ public abstract class LivingEntity extends Entity implements Attackable {
                 if (!source.is(DamageTypeTags.IS_PROJECTILE)) {
                     Entity entity = source.getDirectEntity();
 
-                    if (entity instanceof LivingEntity && entity.distanceToSqr(this) <= (200.0D * 200.0D)) { // Paper - Improve boat collision performance
-                        LivingEntity entityliving = (LivingEntity) entity;
-
+                    if (entity instanceof LivingEntity entityliving && entity.distanceToSqr(this) <= (200.0D * 200.0D)) { // Paper - Improve boat collision performance
                         this.blockUsingShield(entityliving);
                     }
                 }
@@ -3206,7 +3204,7 @@ public abstract class LivingEntity extends Entity implements Attackable {
     @Nullable
     private Map<EquipmentSlot, ItemStack> collectEquipmentChanges() {
         Map<EquipmentSlot, ItemStack> map = null;
-        EquipmentSlot[] aenumitemslot = EquipmentSlot.values();
+        EquipmentSlot[] aenumitemslot = EquipmentSlot.VALUES; // Leaves - reduce array allocations
 
         for (EquipmentSlot enumitemslot : aenumitemslot) {
             ItemStack itemstack;
diff --git a/src/main/java/net/minecraft/world/entity/Mob.java b/src/main/java/net/minecraft/world/entity/Mob.java
index 4c26749515f7d4508f749caf4ae90607131bed4e..f27b065c5a16bec614c06cd9ceca7f3b2b1cdb61 100644
--- a/src/main/java/net/minecraft/world/entity/Mob.java
+++ b/src/main/java/net/minecraft/world/entity/Mob.java
@@ -85,7 +85,6 @@ import org.bukkit.event.entity.EntityTargetLivingEntityEvent;
 import org.bukkit.event.entity.EntityTargetEvent;
 import org.bukkit.event.entity.EntityTransformEvent;
 import org.bukkit.event.entity.EntityUnleashEvent;
-import org.bukkit.event.entity.EntityUnleashEvent.UnleashReason;
 // CraftBukkit end
 
 public abstract class Mob extends LivingEntity implements Targeting {
@@ -197,9 +196,7 @@ public abstract class Mob extends LivingEntity implements Targeting {
         {
             Entity entity = this.getControlledVehicle();
 
-            if (entity instanceof Mob) {
-                Mob entityinsentient1 = (Mob) entity;
-
+            if (entity instanceof Mob entityinsentient1) {
                 if (entityinsentient1.shouldPassengersInheritMalus()) {
                     entityinsentient = entityinsentient1;
                     break label17;
@@ -248,9 +245,7 @@ public abstract class Mob extends LivingEntity implements Targeting {
     public MoveControl getMoveControl() {
         Entity entity = this.getControlledVehicle();
 
-        if (entity instanceof Mob) {
-            Mob entityinsentient = (Mob) entity;
-
+        if (entity instanceof Mob entityinsentient) {
             return entityinsentient.getMoveControl();
         } else {
             return this.moveControl;
@@ -264,9 +259,7 @@ public abstract class Mob extends LivingEntity implements Targeting {
     public PathNavigation getNavigation() {
         Entity entity = this.getControlledVehicle();
 
-        if (entity instanceof Mob) {
-            Mob entityinsentient = (Mob) entity;
-
+        if (entity instanceof Mob entityinsentient) {
             return entityinsentient.getNavigation();
         } else {
             return this.navigation;
@@ -279,9 +272,7 @@ public abstract class Mob extends LivingEntity implements Targeting {
         Entity entity = this.getFirstPassenger();
         Mob entityinsentient;
 
-        if (!this.isNoAi() && entity instanceof Mob) {
-            Mob entityinsentient1 = (Mob) entity;
-
+        if (!this.isNoAi() && entity instanceof Mob entityinsentient1) {
             if (entity.canControlVehicle()) {
                 entityinsentient = entityinsentient1;
                 return entityinsentient;
@@ -502,8 +493,8 @@ public abstract class Mob extends LivingEntity implements Targeting {
 
         CompoundTag nbttagcompound1;
 
-        for (Iterator iterator = this.armorItems.iterator(); iterator.hasNext(); nbttaglist.add(nbttagcompound1)) {
-            ItemStack itemstack = (ItemStack) iterator.next();
+        for (Iterator<ItemStack> iterator = this.armorItems.iterator(); iterator.hasNext(); nbttaglist.add(nbttagcompound1)) {
+            ItemStack itemstack = iterator.next();
 
             nbttagcompound1 = new CompoundTag();
             if (!itemstack.isEmpty()) {
@@ -516,8 +507,8 @@ public abstract class Mob extends LivingEntity implements Targeting {
 
         CompoundTag nbttagcompound2;
 
-        for (Iterator iterator1 = this.handItems.iterator(); iterator1.hasNext(); nbttaglist1.add(nbttagcompound2)) {
-            ItemStack itemstack1 = (ItemStack) iterator1.next();
+        for (Iterator<ItemStack> iterator1 = this.handItems.iterator(); iterator1.hasNext(); nbttaglist1.add(nbttagcompound2)) {
+            ItemStack itemstack1 = iterator1.next();
 
             nbttagcompound2 = new CompoundTag();
             if (!itemstack1.isEmpty()) {
@@ -700,11 +691,8 @@ public abstract class Mob extends LivingEntity implements Targeting {
         if (!this.level().isClientSide && this.canPickUpLoot() && this.isAlive() && !this.dead && this.level().getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING)) {
             Vec3i baseblockposition = this.getPickupReach();
             List<ItemEntity> list = this.level().getEntitiesOfClass(ItemEntity.class, this.getBoundingBox().inflate((double) baseblockposition.getX(), (double) baseblockposition.getY(), (double) baseblockposition.getZ()));
-            Iterator iterator = list.iterator();
-
-            while (iterator.hasNext()) {
-                ItemEntity entityitem = (ItemEntity) iterator.next();
 
+            for (ItemEntity entityitem : list) {
                 if (!entityitem.isRemoved() && !entityitem.getItem().isEmpty() && !entityitem.hasPickUpDelay() && this.wantsToPickUp(entityitem.getItem())) {
                     // Paper start - Item#canEntityPickup
                     if (!entityitem.canMobPickup) {
@@ -805,11 +793,10 @@ public abstract class Mob extends LivingEntity implements Targeting {
         if (oldStack.isEmpty()) {
             return true;
         } else if (newStack.getItem() instanceof SwordItem) {
-            if (!(oldStack.getItem() instanceof SwordItem)) {
+            if (!(oldStack.getItem() instanceof SwordItem itemsword1)) {
                 return true;
             } else {
                 SwordItem itemsword = (SwordItem) newStack.getItem();
-                SwordItem itemsword1 = (SwordItem) oldStack.getItem();
 
                 return itemsword.getDamage() != itemsword1.getDamage() ? itemsword.getDamage() > itemsword1.getDamage() : this.canReplaceEqualItem(newStack, oldStack);
             }
@@ -820,16 +807,12 @@ public abstract class Mob extends LivingEntity implements Targeting {
         } else {
             Item item = newStack.getItem();
 
-            if (item instanceof ArmorItem) {
-                ArmorItem itemarmor = (ArmorItem) item;
-
+            if (item instanceof ArmorItem itemarmor) {
                 if (EnchantmentHelper.hasBindingCurse(oldStack)) {
                     return false;
-                } else if (!(oldStack.getItem() instanceof ArmorItem)) {
+                } else if (!(oldStack.getItem() instanceof ArmorItem itemarmor1)) {
                     return true;
                 } else {
-                    ArmorItem itemarmor1 = (ArmorItem) oldStack.getItem();
-
                     return itemarmor.getDefense() != itemarmor1.getDefense() ? itemarmor.getDefense() > itemarmor1.getDefense() : (itemarmor.getToughness() != itemarmor1.getToughness() ? itemarmor.getToughness() > itemarmor1.getToughness() : this.canReplaceEqualItem(newStack, oldStack));
                 }
             } else {
@@ -840,8 +823,7 @@ public abstract class Mob extends LivingEntity implements Targeting {
 
                     Item item1 = oldStack.getItem();
 
-                    if (item1 instanceof DiggerItem) {
-                        DiggerItem itemtool = (DiggerItem) item1;
+                    if (item1 instanceof DiggerItem itemtool) {
                         DiggerItem itemtool1 = (DiggerItem) newStack.getItem();
 
                         if (itemtool1.getAttackDamage() != itemtool.getAttackDamage()) {
@@ -993,15 +975,10 @@ public abstract class Mob extends LivingEntity implements Targeting {
     public void lookAt(Entity targetEntity, float maxYawChange, float maxPitchChange) {
         double d0 = targetEntity.getX() - this.getX();
         double d1 = targetEntity.getZ() - this.getZ();
-        double d2;
 
-        if (targetEntity instanceof LivingEntity) {
-            LivingEntity entityliving = (LivingEntity) targetEntity;
-
-            d2 = entityliving.getEyeY() - this.getEyeY();
-        } else {
-            d2 = (targetEntity.getBoundingBox().minY + targetEntity.getBoundingBox().maxY) / 2.0D - this.getEyeY();
-        }
+        double d2 = targetEntity instanceof LivingEntity entityliving ?
+                entityliving.getEyeY() - this.getEyeY():
+                (targetEntity.getBoundingBox().minY + targetEntity.getBoundingBox().maxY) / 2.0D - this.getEyeY();
 
         double d3 = Math.sqrt(d0 * d0 + d1 * d1);
         float f2 = (float) (Mth.atan2(d1, d0) * 57.2957763671875D) - 90.0F;
@@ -1075,14 +1052,11 @@ public abstract class Mob extends LivingEntity implements Targeting {
 
     @Override
     public ItemStack getItemBySlot(EquipmentSlot slot) {
-        switch (slot.getType()) {
-            case HAND:
-                return (ItemStack) this.handItems.get(slot.getIndex());
-            case ARMOR:
-                return (ItemStack) this.armorItems.get(slot.getIndex());
-            default:
-                return ItemStack.EMPTY;
-        }
+        return switch (slot.getType()) {
+            case HAND -> (ItemStack) this.handItems.get(slot.getIndex());
+            case ARMOR -> (ItemStack) this.armorItems.get(slot.getIndex());
+            default -> ItemStack.EMPTY;
+        };
     }
 
     @Override
@@ -1114,11 +1088,8 @@ public abstract class Mob extends LivingEntity implements Targeting {
     @Override
     protected void dropCustomDeathLoot(DamageSource source, int lootingMultiplier, boolean allowDrops) {
         super.dropCustomDeathLoot(source, lootingMultiplier, allowDrops);
-        EquipmentSlot[] aenumitemslot = EquipmentSlot.values();
-        int j = aenumitemslot.length;
-
-        for (int k = 0; k < j; ++k) {
-            EquipmentSlot enumitemslot = aenumitemslot[k];
+        EquipmentSlot[] aenumitemslot = EquipmentSlot.VALUES; // Leaves - reduce array allocations
+        for (EquipmentSlot enumitemslot : aenumitemslot) {
             if (this.shouldSkipLoot(enumitemslot)) continue; // Paper
             ItemStack itemstack = this.getItemBySlot(enumitemslot);
             float f = this.getEquipmentDropChance(enumitemslot);
@@ -1131,8 +1102,8 @@ public abstract class Mob extends LivingEntity implements Targeting {
 
                 this.spawnAtLocation(itemstack);
                 if (this.clearEquipmentSlots) { // Paper
-                this.setItemSlot(enumitemslot, ItemStack.EMPTY);
-                // Paper start
+                    this.setItemSlot(enumitemslot, ItemStack.EMPTY);
+                    // Paper start
                 } else {
                     this.clearedEquipmentSlots.add(enumitemslot);
                 }
@@ -1143,20 +1114,11 @@ public abstract class Mob extends LivingEntity implements Targeting {
     }
 
     protected float getEquipmentDropChance(EquipmentSlot slot) {
-        float f;
-
-        switch (slot.getType()) {
-            case HAND:
-                f = this.handDropChances[slot.getIndex()];
-                break;
-            case ARMOR:
-                f = this.armorDropChances[slot.getIndex()];
-                break;
-            default:
-                f = 0.0F;
-        }
-
-        return f;
+        return switch (slot.getType()) {
+            case HAND -> this.handDropChances[slot.getIndex()];
+            case ARMOR -> this.armorDropChances[slot.getIndex()];
+            default -> 0.0F;
+        };
     }
 
     protected void populateDefaultEquipmentSlots(RandomSource random, DifficultyInstance localDifficulty) {
@@ -1177,12 +1139,9 @@ public abstract class Mob extends LivingEntity implements Targeting {
             }
 
             boolean flag = true;
-            EquipmentSlot[] aenumitemslot = EquipmentSlot.values();
-            int j = aenumitemslot.length;
-
-            for (int k = 0; k < j; ++k) {
-                EquipmentSlot enumitemslot = aenumitemslot[k];
+            EquipmentSlot[] aenumitemslot = EquipmentSlot.VALUES; // Leaves - reduce array allocations
 
+            for (EquipmentSlot enumitemslot : aenumitemslot) {
                 if (enumitemslot.getType() == EquipmentSlot.Type.ARMOR) {
                     ItemStack itemstack = this.getItemBySlot(enumitemslot);
 
@@ -1264,12 +1223,9 @@ public abstract class Mob extends LivingEntity implements Targeting {
         float f = localDifficulty.getSpecialMultiplier();
 
         this.enchantSpawnedWeapon(random, f);
-        EquipmentSlot[] aenumitemslot = EquipmentSlot.values();
-        int i = aenumitemslot.length;
-
-        for (int j = 0; j < i; ++j) {
-            EquipmentSlot enumitemslot = aenumitemslot[j];
+        EquipmentSlot[] aenumitemslot = EquipmentSlot.VALUES; // Leaves - reduce array allocations
 
+        for (EquipmentSlot enumitemslot : aenumitemslot) {
             if (enumitemslot.getType() == EquipmentSlot.Type.ARMOR) {
                 this.enchantSpawnedArmor(random, f, enumitemslot);
             }
@@ -1484,11 +1440,9 @@ public abstract class Mob extends LivingEntity implements Targeting {
                 t0.setInvulnerable(this.isInvulnerable());
                 if (flag) {
                     t0.setCanPickUpLoot(this.canPickUpLoot());
-                    EquipmentSlot[] aenumitemslot = EquipmentSlot.values();
-                    int i = aenumitemslot.length;
+                    EquipmentSlot[] aenumitemslot = EquipmentSlot.VALUES; // Leaves - reduce array allocations
 
-                    for (int j = 0; j < i; ++j) {
-                        EquipmentSlot enumitemslot = aenumitemslot[j];
+                    for (EquipmentSlot enumitemslot : aenumitemslot) {
                         ItemStack itemstack = this.getItemBySlot(enumitemslot);
 
                         if (!itemstack.isEmpty()) {
@@ -1721,9 +1675,7 @@ public abstract class Mob extends LivingEntity implements Targeting {
                 this.setDeltaMovement(this.getDeltaMovement().multiply(0.6D, 1.0D, 0.6D));
             }
 
-            if (target instanceof Player) {
-                Player entityhuman = (Player) target;
-
+            if (target instanceof Player entityhuman) {
                 this.maybeDisableShield(entityhuman, this.getMainHandItem(), entityhuman.isUsingItem() ? entityhuman.getUseItem() : ItemStack.EMPTY);
             }
 
diff --git a/src/main/java/net/minecraft/world/entity/monster/Zombie.java b/src/main/java/net/minecraft/world/entity/monster/Zombie.java
index 723ef6e7a3618c30087ce2ac50811dbe638881ec..5ba3dca27a2665a798b774fdcd4d3d97cc696389 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Zombie.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Zombie.java
@@ -62,7 +62,6 @@ import net.minecraft.network.syncher.EntityDataAccessor;
 import net.minecraft.network.syncher.EntityDataSerializers;
 import net.minecraft.network.syncher.SynchedEntityData;
 // CraftBukkit start
-import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
@@ -603,9 +602,7 @@ public class Zombie extends Monster {
         super.dropCustomDeathLoot(source, lootingMultiplier, allowDrops);
         Entity entity = source.getEntity();
 
-        if (entity instanceof Creeper) {
-            Creeper entitycreeper = (Creeper) entity;
-
+        if (entity instanceof Creeper entitycreeper) {
             if (entitycreeper.canDropMobsSkull()) {
                 ItemStack itemstack = this.getSkull();
 
diff --git a/src/main/java/net/minecraft/world/entity/monster/ZombieVillager.java b/src/main/java/net/minecraft/world/entity/monster/ZombieVillager.java
index 9375c3732114f7a993ea96ed71531940af38c628..c053e317b0ae77cd6117bf13c5d33f5d77e39a8e 100644
--- a/src/main/java/net/minecraft/world/entity/monster/ZombieVillager.java
+++ b/src/main/java/net/minecraft/world/entity/monster/ZombieVillager.java
@@ -47,7 +47,6 @@ import org.joml.Vector3f;
 import org.slf4j.Logger;
 
 // CraftBukkit start
-import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.sounds.SoundEvent;
@@ -234,11 +233,9 @@ public class ZombieVillager extends Zombie implements VillagerDataHolder {
             return;
         }
         // CraftBukkit end
-        EquipmentSlot[] aenumitemslot = EquipmentSlot.values();
-        int i = aenumitemslot.length;
+        EquipmentSlot[] aenumitemslot = EquipmentSlot.VALUES; // Leaves - reduce array allocations
 
-        for (int j = 0; j < i; ++j) {
-            EquipmentSlot enumitemslot = aenumitemslot[j];
+        for (EquipmentSlot enumitemslot : aenumitemslot) {
             ItemStack itemstack = this.getItemBySlot(enumitemslot);
 
             if (!itemstack.isEmpty()) {
diff --git a/src/main/java/net/minecraft/world/item/ItemStack.java b/src/main/java/net/minecraft/world/item/ItemStack.java
index 43d8f91cdbc4e197f2811fb406a7dae8a8ebfdc1..2d6e7994af21567db6ffb893ba7d9353cb41f0df 100644
--- a/src/main/java/net/minecraft/world/item/ItemStack.java
+++ b/src/main/java/net/minecraft/world/item/ItemStack.java
@@ -28,7 +28,6 @@ import net.minecraft.Util;
 import net.minecraft.advancements.CriteriaTriggers;
 import net.minecraft.commands.arguments.blocks.BlockStateParser;
 import net.minecraft.core.BlockPos;
-import net.minecraft.core.Direction;
 import net.minecraft.core.Holder;
 import net.minecraft.core.HolderSet;
 import net.minecraft.core.Registry;
@@ -45,7 +44,6 @@ import net.minecraft.network.chat.ComponentUtils;
 import net.minecraft.network.chat.HoverEvent;
 import net.minecraft.network.chat.MutableComponent;
 import net.minecraft.network.chat.Style;
-import net.minecraft.network.protocol.game.ClientboundBlockUpdatePacket;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.tags.TagKey;
 import net.minecraft.util.ExtraCodecs;
@@ -84,7 +82,6 @@ import org.slf4j.Logger;
 // CraftBukkit start
 import com.mojang.serialization.Dynamic;
 import java.util.Map;
-import java.util.Objects;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.ServerPlayer;
@@ -1054,7 +1051,7 @@ public final class ItemStack {
         int k;
 
         if (ItemStack.shouldShowInTooltip(i, ItemStack.TooltipPart.MODIFIERS)) {
-            EquipmentSlot[] aenumitemslot = EquipmentSlot.values();
+            EquipmentSlot[] aenumitemslot = EquipmentSlot.VALUES; // Leaves - reduce array allocations
 
             k = aenumitemslot.length;
 
@@ -1065,11 +1062,9 @@ public final class ItemStack {
                 if (!multimap.isEmpty()) {
                     list.add(CommonComponents.EMPTY);
                     list.add(Component.translatable("item.modifiers." + enumitemslot.getName()).withStyle(ChatFormatting.GRAY));
-                    Iterator iterator = multimap.entries().iterator();
 
-                    while (iterator.hasNext()) {
-                        Entry<Attribute, AttributeModifier> entry = (Entry) iterator.next();
-                        AttributeModifier attributemodifier = (AttributeModifier) entry.getValue();
+                    for (Entry<Attribute, AttributeModifier> attributeAttributeModifierEntry : multimap.entries()) {
+                        AttributeModifier attributemodifier = attributeAttributeModifierEntry.getValue();
                         double d0 = attributemodifier.getAmount();
                         boolean flag = false;
 
@@ -1087,7 +1082,7 @@ public final class ItemStack {
                         double d1;
 
                         if (attributemodifier.getOperation() != AttributeModifier.Operation.MULTIPLY_BASE && attributemodifier.getOperation() != AttributeModifier.Operation.MULTIPLY_TOTAL) {
-                            if (((Attribute) entry.getKey()).equals(Attributes.KNOCKBACK_RESISTANCE)) {
+                            if (((Attribute) attributeAttributeModifierEntry.getKey()).equals(Attributes.KNOCKBACK_RESISTANCE)) {
                                 d1 = d0 * 10.0D;
                             } else {
                                 d1 = d0;
@@ -1097,12 +1092,12 @@ public final class ItemStack {
                         }
 
                         if (flag) {
-                            list.add(CommonComponents.space().append((Component) Component.translatable("attribute.modifier.equals." + attributemodifier.getOperation().toValue(), ItemStack.ATTRIBUTE_MODIFIER_FORMAT.format(d1), Component.translatable(((Attribute) entry.getKey()).getDescriptionId()))).withStyle(ChatFormatting.DARK_GREEN));
+                            list.add(CommonComponents.space().append((Component) Component.translatable("attribute.modifier.equals." + attributemodifier.getOperation().toValue(), ItemStack.ATTRIBUTE_MODIFIER_FORMAT.format(d1), Component.translatable(((Attribute) attributeAttributeModifierEntry.getKey()).getDescriptionId()))).withStyle(ChatFormatting.DARK_GREEN));
                         } else if (d0 > 0.0D) {
-                            list.add(Component.translatable("attribute.modifier.plus." + attributemodifier.getOperation().toValue(), ItemStack.ATTRIBUTE_MODIFIER_FORMAT.format(d1), Component.translatable(((Attribute) entry.getKey()).getDescriptionId())).withStyle(ChatFormatting.BLUE));
+                            list.add(Component.translatable("attribute.modifier.plus." + attributemodifier.getOperation().toValue(), ItemStack.ATTRIBUTE_MODIFIER_FORMAT.format(d1), Component.translatable(((Attribute) attributeAttributeModifierEntry.getKey()).getDescriptionId())).withStyle(ChatFormatting.BLUE));
                         } else if (d0 < 0.0D) {
                             d1 *= -1.0D;
-                            list.add(Component.translatable("attribute.modifier.take." + attributemodifier.getOperation().toValue(), ItemStack.ATTRIBUTE_MODIFIER_FORMAT.format(d1), Component.translatable(((Attribute) entry.getKey()).getDescriptionId())).withStyle(ChatFormatting.RED));
+                            list.add(Component.translatable("attribute.modifier.take." + attributemodifier.getOperation().toValue(), ItemStack.ATTRIBUTE_MODIFIER_FORMAT.format(d1), Component.translatable(((Attribute) attributeAttributeModifierEntry.getKey()).getDescriptionId())).withStyle(ChatFormatting.RED));
                         }
                     }
                 }
diff --git a/src/main/java/net/minecraft/world/item/enchantment/Enchantments.java b/src/main/java/net/minecraft/world/item/enchantment/Enchantments.java
index 8343e175a7221f7b0e83c39cd5350683a0649f8d..cf2d66b5d5d3e2b591a0ad0d8a7a10cbad4b1b8a 100644
--- a/src/main/java/net/minecraft/world/item/enchantment/Enchantments.java
+++ b/src/main/java/net/minecraft/world/item/enchantment/Enchantments.java
@@ -63,10 +63,12 @@ public class Enchantments {
     public static final Enchantment MULTISHOT = register("multishot", new MultiShotEnchantment(Enchantment.Rarity.RARE, EquipmentSlot.MAINHAND));
     public static final Enchantment QUICK_CHARGE = register("quick_charge", new QuickChargeEnchantment(Enchantment.Rarity.UNCOMMON, EquipmentSlot.MAINHAND));
     public static final Enchantment PIERCING = register("piercing", new ArrowPiercingEnchantment(Enchantment.Rarity.COMMON, EquipmentSlot.MAINHAND));
-    public static final Enchantment MENDING = register("mending", new MendingEnchantment(Enchantment.Rarity.RARE, EquipmentSlot.values()));
+    // Leaves start - reduce array allocations
+    public static final Enchantment MENDING = Enchantments.register("mending", new MendingEnchantment(Enchantment.Rarity.RARE, EquipmentSlot.VALUES));
     public static final Enchantment VANISHING_CURSE = register(
-        "vanishing_curse", new VanishingCurseEnchantment(Enchantment.Rarity.VERY_RARE, EquipmentSlot.values())
+        "vanishing_curse", new VanishingCurseEnchantment(Enchantment.Rarity.VERY_RARE, EquipmentSlot.VALUES)
     );
+    // Leaves end - reduce array allocations
 
     private static Enchantment register(String name, Enchantment enchantment) {
         return Registry.register(BuiltInRegistries.ENCHANTMENT, name, enchantment);
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index acde025900b8d6ae29809378581b6c1ec1f024f2..2eac02bdf99d7c6166f176163db53cfd9268f993 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -88,6 +88,7 @@ import org.bukkit.craftbukkit.block.data.CraftBlockData;
 import org.bukkit.craftbukkit.util.CraftSpawnCategory;
 import org.bukkit.entity.SpawnCategory;
 import org.bukkit.event.block.BlockPhysicsEvent;
+import org.leavesmc.leaves.util.ArrayConstants;
 // CraftBukkit end
 
 public abstract class Level implements LevelAccessor, AutoCloseable {
@@ -1920,7 +1921,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
     public org.bukkit.entity.Entity[] getChunkEntities(int chunkX, int chunkZ) {
         io.papermc.paper.world.ChunkEntitySlices slices = ((ServerLevel)this).getEntityLookup().getChunk(chunkX, chunkZ);
         if (slices == null) {
-            return new org.bukkit.entity.Entity[0];
+            return ArrayConstants.emptyBukkitEntityArray; // Leaves - reduce array allocations
         }
         return slices.getChunkEntities();
     }
diff --git a/src/main/java/net/minecraft/world/level/block/ComposterBlock.java b/src/main/java/net/minecraft/world/level/block/ComposterBlock.java
index f9084e2605d7403721fe6b714bfad051f932aaef..a831253360d3f06a2ccf59bb83d4117e744292f2 100644
--- a/src/main/java/net/minecraft/world/level/block/ComposterBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ComposterBlock.java
@@ -43,6 +43,7 @@ import net.minecraft.world.phys.shapes.VoxelShape;
 // CraftBukkit start
 import org.bukkit.craftbukkit.inventory.CraftBlockInventoryHolder;
 import org.bukkit.craftbukkit.util.DummyGeneratorAccess;
+import org.leavesmc.leaves.util.ArrayConstants;
 // CraftBukkit end
 
 public class ComposterBlock extends Block implements WorldlyContainerHolder {
@@ -422,7 +423,7 @@ public class ComposterBlock extends Block implements WorldlyContainerHolder {
 
         @Override
         public int[] getSlotsForFace(Direction side) {
-            return side == Direction.DOWN ? new int[]{0} : new int[0];
+            return side == Direction.DOWN ? ArrayConstants.zeroSingletonIntArray : ArrayConstants.emptyIntArray; // Leaves - reduce array allocations
         }
 
         @Override
@@ -471,7 +472,7 @@ public class ComposterBlock extends Block implements WorldlyContainerHolder {
 
         @Override
         public int[] getSlotsForFace(Direction side) {
-            return side == Direction.UP ? new int[]{0} : new int[0];
+            return side == Direction.UP ? ArrayConstants.zeroSingletonIntArray : ArrayConstants.emptyIntArray; // Leaves - reduce array allocations
         }
 
         @Override
@@ -513,7 +514,7 @@ public class ComposterBlock extends Block implements WorldlyContainerHolder {
 
         @Override
         public int[] getSlotsForFace(Direction side) {
-            return new int[0];
+            return ArrayConstants.emptyIntArray; // Leaves - reduce array allocations
         }
 
         @Override
diff --git a/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
index 89d06253b00604114e543ebbe12a9993ae95dc41..86231cdd9fb41e74fc292019b9fb4a1f5d4f45aa 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
@@ -4,7 +4,6 @@ import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import it.unimi.dsi.fastutil.objects.Object2IntMap.Entry;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
-import it.unimi.dsi.fastutil.objects.ObjectIterator;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
@@ -58,6 +57,7 @@ import org.bukkit.event.inventory.FurnaceExtractEvent;
 import org.bukkit.event.inventory.FurnaceSmeltEvent;
 import org.bukkit.event.inventory.FurnaceStartSmeltEvent;
 import org.bukkit.inventory.CookingRecipe;
+import org.leavesmc.leaves.util.ArrayConstants;
 // CraftBukkit end
 
 public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntity implements WorldlyContainer, RecipeCraftingHolder, StackedContentsCompatible {
@@ -66,7 +66,7 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
     protected static final int SLOT_FUEL = 1;
     protected static final int SLOT_RESULT = 2;
     public static final int DATA_LIT_TIME = 0;
-    private static final int[] SLOTS_FOR_UP = new int[]{0};
+    private static final int[] SLOTS_FOR_UP = ArrayConstants.zeroSingletonIntArray; // Leaves - reduce array allocations
     private static final int[] SLOTS_FOR_DOWN = new int[]{2, 1};
     private static final int[] SLOTS_FOR_SIDES = new int[]{1};
     public static final int DATA_LIT_DURATION = 1;
@@ -92,18 +92,13 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
         this.dataAccess = new ContainerData() {
             @Override
             public int get(int index) {
-                switch (index) {
-                    case 0:
-                        return AbstractFurnaceBlockEntity.this.litTime;
-                    case 1:
-                        return AbstractFurnaceBlockEntity.this.litDuration;
-                    case 2:
-                        return AbstractFurnaceBlockEntity.this.cookingProgress;
-                    case 3:
-                        return AbstractFurnaceBlockEntity.this.cookingTotalTime;
-                    default:
-                        return 0;
-                }
+                return switch (index) {
+                    case 0 -> AbstractFurnaceBlockEntity.this.litTime;
+                    case 1 -> AbstractFurnaceBlockEntity.this.litDuration;
+                    case 2 -> AbstractFurnaceBlockEntity.this.cookingProgress;
+                    case 3 -> AbstractFurnaceBlockEntity.this.cookingTotalTime;
+                    default -> 0;
+                };
             }
 
             @Override
@@ -247,13 +242,9 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
     }
 
     private static void add(Map<Item, Integer> fuelTimes, TagKey<Item> tag, int fuelTime) {
-        Iterator iterator = BuiltInRegistries.ITEM.getTagOrEmpty(tag).iterator();
-
-        while (iterator.hasNext()) {
-            Holder<Item> holder = (Holder) iterator.next();
-
-            if (!AbstractFurnaceBlockEntity.isNeverAFurnaceFuel((Item) holder.value())) {
-                fuelTimes.put((Item) holder.value(), fuelTime);
+        for (Holder<Item> itemHolder : BuiltInRegistries.ITEM.getTagOrEmpty(tag)) {
+            if (!AbstractFurnaceBlockEntity.isNeverAFurnaceFuel(itemHolder.value())) {
+                fuelTimes.put(itemHolder.value(), fuelTime);
             }
         }
 
@@ -285,15 +276,12 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
         this.cookingTotalTime = nbt.getShort("CookTimeTotal");
         this.litDuration = this.getBurnDuration((ItemStack) this.items.get(1));
         CompoundTag nbttagcompound1 = nbt.getCompound("RecipesUsed");
-        Iterator iterator = nbttagcompound1.getAllKeys().iterator();
-
-        while (iterator.hasNext()) {
-            String s = (String) iterator.next();
 
+        for (String s : nbttagcompound1.getAllKeys()) {
             // Paper start - Validate ResourceLocation
             final ResourceLocation resourceLocation = ResourceLocation.tryParse(s);
             if (resourceLocation != null) {
-            this.recipesUsed.put(resourceLocation, nbttagcompound1.getInt(s));
+                this.recipesUsed.put(resourceLocation, nbttagcompound1.getInt(s));
             }
             // Paper end - Validate ResourceLocation
         }
@@ -621,10 +609,9 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
         List<RecipeHolder<?>> list = this.getRecipesToAwardAndPopExperience(entityplayer.serverLevel(), entityplayer.position(), this.worldPosition, entityplayer, itemstack, amount); // CraftBukkit
 
         entityplayer.awardRecipes(list);
-        Iterator iterator = list.iterator();
 
-        while (iterator.hasNext()) {
-            RecipeHolder<?> recipeholder = (RecipeHolder) iterator.next();
+        for (RecipeHolder<?> recipeHolder : list) {
+            RecipeHolder<?> recipeholder = (RecipeHolder) recipeHolder;
 
             if (recipeholder != null) {
                 entityplayer.triggerRecipeCrafted(recipeholder, this.items);
@@ -642,15 +629,13 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
     public List<RecipeHolder<?>> getRecipesToAwardAndPopExperience(ServerLevel worldserver, Vec3 vec3d, BlockPos blockposition, ServerPlayer entityplayer, ItemStack itemstack, int amount) {
         // CraftBukkit end
         List<RecipeHolder<?>> list = Lists.newArrayList();
-        ObjectIterator objectiterator = this.recipesUsed.object2IntEntrySet().iterator();
-
-        while (objectiterator.hasNext()) {
-            Entry<ResourceLocation> entry = (Entry) objectiterator.next();
 
-            worldserver.getRecipeManager().byKey((ResourceLocation) entry.getKey()).ifPresent((recipeholder) -> {
-                if (!(recipeholder.value() instanceof AbstractCookingRecipe)) return; // Paper - don't process non-cooking recipes
+        for (Entry<ResourceLocation> resourceLocationEntry : this.recipesUsed.object2IntEntrySet()) {
+            worldserver.getRecipeManager().byKey(resourceLocationEntry.getKey()).ifPresent((recipeholder) -> {
+                if (!(recipeholder.value() instanceof AbstractCookingRecipe))
+                    return; // Paper - don't process non-cooking recipes
                 list.add(recipeholder);
-                AbstractFurnaceBlockEntity.createExperience(worldserver, vec3d, entry.getIntValue(), ((AbstractCookingRecipe) recipeholder.value()).getExperience(), blockposition, entityplayer, itemstack, amount); // CraftBukkit
+                AbstractFurnaceBlockEntity.createExperience(worldserver, vec3d, resourceLocationEntry.getIntValue(), ((AbstractCookingRecipe) recipeholder.value()).getExperience(), blockposition, entityplayer, itemstack, amount); // CraftBukkit
             });
         }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftEquipmentSlot.java b/src/main/java/org/bukkit/craftbukkit/CraftEquipmentSlot.java
index 402a238cf502003a232bb95473bd13e59e067fab..6095f5c9298558c77a788c1c9f9ef1f32825b37c 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftEquipmentSlot.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftEquipmentSlot.java
@@ -5,8 +5,10 @@ import org.bukkit.inventory.EquipmentSlot;
 
 public class CraftEquipmentSlot {
 
-    private static final net.minecraft.world.entity.EquipmentSlot[] slots = new net.minecraft.world.entity.EquipmentSlot[EquipmentSlot.values().length];
-    private static final EquipmentSlot[] enums = new EquipmentSlot[net.minecraft.world.entity.EquipmentSlot.values().length];
+    // Leaves start - reduce array allocations
+    private static final net.minecraft.world.entity.EquipmentSlot[] slots = net.minecraft.world.entity.EquipmentSlot.VALUES;
+    private static final EquipmentSlot[] enums = new EquipmentSlot[net.minecraft.world.entity.EquipmentSlot.VALUES.length];
+    // Leaves end - reduce array allocations
 
     static {
         set(EquipmentSlot.HAND, net.minecraft.world.entity.EquipmentSlot.MAINHAND);
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftEntityEquipment.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftEntityEquipment.java
index 6827979a5b270ced53b46ecb9eff548727dadb81..1b84078152d0585ec51288e585754be176f2d7c2 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftEntityEquipment.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftEntityEquipment.java
@@ -165,7 +165,7 @@ public class CraftEntityEquipment implements EntityEquipment {
 
     @Override
     public void clear() {
-        for (net.minecraft.world.entity.EquipmentSlot slot : net.minecraft.world.entity.EquipmentSlot.values()) {
+        for (net.minecraft.world.entity.EquipmentSlot slot : net.minecraft.world.entity.EquipmentSlot.VALUES) { // Leaves - reduce array allocations
             this.setEquipment(slot, null, false);
         }
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/util/WeakCollection.java b/src/main/java/org/bukkit/craftbukkit/util/WeakCollection.java
index b25dc23b81687dd4d4e70b3615ffb91f8c03c68b..dd2c837c6eb4334cefe3585e1e8970d320e0c968 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/WeakCollection.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/WeakCollection.java
@@ -1,6 +1,8 @@
 package org.bukkit.craftbukkit.util;
 
 import com.google.common.base.Preconditions;
+import org.leavesmc.leaves.util.ArrayConstants;
+
 import java.lang.ref.WeakReference;
 import java.util.ArrayList;
 import java.util.Collection;
@@ -164,7 +166,7 @@ public final class WeakCollection<T> implements Collection<T> {
 
     @Override
     public Object[] toArray() {
-        return this.toArray(new Object[0]);
+        return this.toArray(ArrayConstants.emptyObjectArray); // Leaves - reduce array allocations
     }
 
     @Override
diff --git a/src/main/java/org/leavesmc/leaves/util/ArrayConstants.java b/src/main/java/org/leavesmc/leaves/util/ArrayConstants.java
new file mode 100644
index 0000000000000000000000000000000000000000..afd8503935824372e567834d10f6e351e92801de
--- /dev/null
+++ b/src/main/java/org/leavesmc/leaves/util/ArrayConstants.java
@@ -0,0 +1,21 @@
+package org.leavesmc.leaves.util;
+
+import net.minecraft.server.level.ServerLevel;
+
+// Powered by Gale(https://github.com/GaleMC/Gale)
+
+public class ArrayConstants {
+
+    private ArrayConstants() {}
+
+    public static final Object[] emptyObjectArray = new Object[0];
+    public static final int[] emptyIntArray = new int[0];
+    public static final int[] zeroSingletonIntArray = new int[]{0};
+    public static final byte[] emptyByteArray = new byte[0];
+    public static final String[] emptyStringArray = new String[0];
+    public static final long[] emptyLongArray = new long[0];
+    public static final org.bukkit.entity.Entity[] emptyBukkitEntityArray = new org.bukkit.entity.Entity[0];
+    public static final net.minecraft.world.entity.Entity[] emptyEntityArray = new net.minecraft.world.entity.Entity[0];
+    public static final ServerLevel[] emptyServerLevelArray = new ServerLevel[0];
+
+}
\ No newline at end of file
