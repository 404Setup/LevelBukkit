From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: 404Setup <153366651+404Setup@users.noreply.github.com>
Date: Sat, 8 Jun 2024 23:37:19 +0800
Subject: [PATCH] Leaves: Cache world generator sea level

This patch is Powered by Gale(https://github.com/GaleMC/Gale)

diff --git a/src/main/java/net/minecraft/world/level/levelgen/NoiseBasedChunkGenerator.java b/src/main/java/net/minecraft/world/level/levelgen/NoiseBasedChunkGenerator.java
index 98c7f695093acbcf9382a5f07a7a89e373709763..478e97c83e2994bc0e03e76f42ed658dd609a8a3 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/NoiseBasedChunkGenerator.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/NoiseBasedChunkGenerator.java
@@ -7,7 +7,6 @@ import com.google.common.collect.Sets;
 import com.mojang.serialization.Codec;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
 import java.text.DecimalFormat;
-import java.util.Iterator;
 import java.util.List;
 import java.util.Objects;
 import java.util.OptionalInt;
@@ -17,6 +16,8 @@ import java.util.concurrent.Executor;
 import java.util.function.Predicate;
 import java.util.function.Supplier;
 import javax.annotation.Nullable;
+
+import dev.paged.levelbukkit.config.LevelBukkitConfig;
 import net.minecraft.SharedConstants;
 import net.minecraft.Util;
 import net.minecraft.core.BlockPos;
@@ -62,12 +63,17 @@ public final class NoiseBasedChunkGenerator extends ChunkGenerator {
     private static final BlockState AIR = Blocks.AIR.defaultBlockState();
     public final Holder<NoiseGeneratorSettings> settings;
     private final Supplier<Aquifer.FluidPicker> globalFluidPicker;
+    private int cachedSeaLevel; // Leaves - cache world generator sea level
 
     public NoiseBasedChunkGenerator(BiomeSource biomeSource, Holder<NoiseGeneratorSettings> settings) {
         super(biomeSource);
         this.settings = settings;
         this.globalFluidPicker = Suppliers.memoize(() -> {
-            return NoiseBasedChunkGenerator.createFluidPicker((NoiseGeneratorSettings) settings.value());
+            // Leaves start - cache world generator sea level
+            var fluidPicker = NoiseBasedChunkGenerator.createFluidPicker(settings.value());
+            this.cachedSeaLevel = settings.value().seaLevel();
+            return fluidPicker;
+            // Leaves end - cache world generator sea level
         });
     }
 
@@ -242,21 +248,18 @@ public final class NoiseBasedChunkGenerator extends ChunkGenerator {
             for (int k = -8; k <= 8; ++k) {
                 ChunkPos chunkcoordintpair1 = new ChunkPos(chunkcoordintpair.x + j, chunkcoordintpair.z + k);
                 ChunkAccess ichunkaccess1 = chunkRegion.getChunk(chunkcoordintpair1.x, chunkcoordintpair1.z);
-                BiomeGenerationSettings biomesettingsgeneration = ichunkaccess1.carverBiome(() -> {
-                    return this.getBiomeGenerationSettings(this.biomeSource.getNoiseBiome(QuartPos.fromBlock(chunkcoordintpair1.getMinBlockX()), 0, QuartPos.fromBlock(chunkcoordintpair1.getMinBlockZ()), noiseConfig.sampler()));
-                });
-                Iterable<Holder<ConfiguredWorldCarver<?>>> iterable = biomesettingsgeneration.getCarvers(carverStep);
-                int l = 0;
+                BiomeGenerationSettings biomesettingsgeneration = ichunkaccess1.carverBiome(() -> this.getBiomeGenerationSettings(this.biomeSource.getNoiseBiome(QuartPos.fromBlock(chunkcoordintpair1.getMinBlockX()), 0, QuartPos.fromBlock(chunkcoordintpair1.getMinBlockZ()), noiseConfig.sampler())));
 
-                for (Iterator iterator = iterable.iterator(); iterator.hasNext(); ++l) {
-                    Holder<ConfiguredWorldCarver<?>> holder = (Holder) iterator.next();
-                    ConfiguredWorldCarver<?> worldgencarverwrapper = (ConfiguredWorldCarver) holder.value();
+                int l = 0;
+                for (Holder<ConfiguredWorldCarver<?>> holder : biomesettingsgeneration.getCarvers(carverStep)) {
+                    ConfiguredWorldCarver<?> worldgencarverwrapper = holder.value();
 
                     seededrandom.setLargeFeatureSeed(seed + (long) l, chunkcoordintpair1.x, chunkcoordintpair1.z);
                     if (worldgencarverwrapper.isStartChunk(seededrandom)) {
                         Objects.requireNonNull(biomemanager1);
                         worldgencarverwrapper.carve(carvingcontext, chunk, biomemanager1::getBiome, seededrandom, aquifer, chunkcoordintpair1, carvingmask);
                     }
+                    l++;
                 }
             }
         }
@@ -287,11 +290,7 @@ public final class NoiseBasedChunkGenerator extends ChunkGenerator {
             return CompletableFuture.supplyAsync(Util.wrapThreadWithTaskName("wgen_fill_noise", () -> {
                 return this.doFill(blender, structureAccessor, noiseConfig, chunk, j, k);
             }), executor).whenCompleteAsync((ichunkaccess1, throwable) -> { // Paper - run with supplied executor
-                Iterator iterator = set.iterator();
-
-                while (iterator.hasNext()) {
-                    LevelChunkSection chunksection1 = (LevelChunkSection) iterator.next();
-
+                for (LevelChunkSection chunksection1 : set) {
                     chunksection1.release();
                 }
 
@@ -394,12 +393,16 @@ public final class NoiseBasedChunkGenerator extends ChunkGenerator {
 
     @Override
     public int getSeaLevel() {
-        return ((NoiseGeneratorSettings) this.settings.value()).seaLevel();
+        // Leaves start - cache world generator sea level
+        return !LevelBukkitConfig.Leaves.cacheWorldGeneratorSeaLevel ?
+                this.settings.value().seaLevel():
+                cachedSeaLevel;
+        // Leaves end - cache world generator sea level
     }
 
     @Override
     public int getMinY() {
-        return ((NoiseGeneratorSettings) this.settings.value()).noiseSettings().minY();
+        return this.settings.value().noiseSettings().minY();
     }
 
     @Override
