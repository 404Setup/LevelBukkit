From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: 404Setup <153366651+404Setup@users.noreply.github.com>
Date: Fri, 31 May 2024 19:15:12 +0800
Subject: [PATCH] Divine: Carpet-Fixes: RecipeManager Optimize

Original project: https://github.com/fxmorin/carpet-fixes
Improves: [Blast]Furnace/Campfire/Smoker/Stonecutter/Crafting/Sheep Color Choosing

diff --git a/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java b/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java
index d87124f5356180a37e581febc6141fdc5f1395a7..c50940cdcbd3fc8f76fe3fe02112ad10ddb0501f 100644
--- a/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java
+++ b/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java
@@ -11,17 +11,15 @@ import com.google.gson.JsonParseException;
 import com.mojang.datafixers.util.Pair;
 import com.mojang.logging.LogUtils;
 import com.mojang.serialization.JsonOps;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.Comparator;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
+
+import java.util.*;
 import java.util.Map.Entry;
-import java.util.Optional;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
+
+import dev.paged.levelbukkit.config.LevelBukkitConfig;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 import net.minecraft.Util;
 import net.minecraft.core.NonNullList;
 import net.minecraft.world.Container;
@@ -60,14 +58,12 @@ public class RecipeManager extends SimpleJsonResourceReloadListener {
         }
         // CraftBukkit end
         Builder<ResourceLocation, RecipeHolder<?>> builder = ImmutableMap.builder();
-        Iterator iterator = prepared.entrySet().iterator();
 
-        while (iterator.hasNext()) {
-            Entry<ResourceLocation, JsonElement> entry = (Entry) iterator.next();
-            ResourceLocation minecraftkey = (ResourceLocation) entry.getKey();
+        for (Entry<ResourceLocation, JsonElement> resourceLocationJsonElementEntry : prepared.entrySet()) {
+            ResourceLocation minecraftkey = resourceLocationJsonElementEntry.getKey();
 
             try {
-                RecipeHolder<?> recipeholder = RecipeManager.fromJson(minecraftkey, GsonHelper.convertToJsonObject((JsonElement) entry.getValue(), "top element"));
+                RecipeHolder<?> recipeholder = RecipeManager.fromJson(minecraftkey, GsonHelper.convertToJsonObject((JsonElement) resourceLocationJsonElementEntry.getValue(), "top element"));
 
                 // CraftBukkit start
                 (map1.computeIfAbsent(recipeholder.value().getType(), (recipes) -> {
@@ -132,12 +128,12 @@ public class RecipeManager extends SimpleJsonResourceReloadListener {
             return ((RecipeHolder) entry.getValue()).value().matches(inventory, world);
         }).findFirst().map((entry) -> {
             inventory.setCurrentRecipe(entry.getValue()); // Paper - Perf: Improve mass crafting
-            return Pair.of((ResourceLocation) entry.getKey(), (RecipeHolder) entry.getValue());
+            return Pair.of(entry.getKey(), entry.getValue());
         });
     }
 
     public <C extends Container, T extends Recipe<C>> List<RecipeHolder<T>> getAllRecipesFor(RecipeType<T> type) {
-        return List.copyOf(this.byType(type).values());
+        return LevelBukkitConfig.Divine.recipeManagerOptimization ? new ObjectArrayList<>(this.byType(type).values()) : List.copyOf(this.byType(type).values()); // DivineMC - Carpet-Fixes: RecipeManager Optimize
     }
 
     public <C extends Container, T extends Recipe<C>> List<RecipeHolder<T>> getRecipesFor(RecipeType<T> type, C inventory, Level world) {
